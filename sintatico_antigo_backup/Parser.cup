package sintatico;
import java_cup.runtime.Symbol;
import java.util.*;
import java.io.*;


parser code {:
    protected int error_sync_size(){
        return 1;
    }


:};


terminal COMENTARIO_MULTI, COMENTARIO_LINHA;
terminal PROGRAM, BEGIN, END, PROCEDURE, VAR;
terminal INT, REAL, BOOLEAN, TRUE, FALSE;
terminal READ, WRITE;
terminal DOIS_PONTOS, VIRGULA, PONTO, PONTO_VIRGULA;
terminal IF, THEN, ELSE, WHILE, DO;
terminal SIMBOLO_IGUAL, SIMBOLO_DIFERENTE, SIMBOLO_MENOR, SIMBOLO_MENOR_IGUAL, SIMBOLO_MAIOR, SIMBOLO_MAIOR_IGUAL;
terminal OP_ATRIBUICAO, OP_ADICAO, OP_SUBTRACAO, OP_DIVISAO, OP_MULTIPLICACAO, OP_AND, OP_OR, OP_NOT;
terminal PARENTESES_ABRE, PARENTESES_FECHA;
terminal NUMERO_INTEIRO, NUMERO_REAL, IDENTIFICADOR;
terminal ERROR, ESPACO, TAB, NOVA_LINHA;

non terminal programa, programa1, programa2, bloco, parte_declaracao_variaveis, parte_declaracao_variaveis2;
non terminal lista_identificadores, lista_identificadores2, parte_declaracao_sub_rotinas, declaracao_procedimentos, declaracao_procedimentos1;
non terminal parametros_formais, secao_parametros_formais, secao_parametros_formais2; 
non terminal tipo, comando_composto, comando_composto2, comando, atribuicao, chamada_procedimento;
non terminal comando_condicional1, comando_condicional12, comando_condicional2; 
non terminal comando_repetitivo, comando_repetitivo2;
non terminal expressao, relacao, expressao_simples, expressao_simples2;
non terminal termo, termo2, fator;
non terminal variavel, lista_expressoes, lista_expressoes2;

precedence left  OP_ADICAO, OP_SUBTRACAO;
precedence left  OP_MULTIPLICACAO, OP_DIVISAO;
precedence left  ELSE;

precedence left IDENTIFICADOR, VIRGULA;

start with programa;

programa ::= PROGRAM programa1 | error {:System.out.println("erro01");:} programa1;
programa1 ::= IDENTIFICADOR programa2 | error {: System.out.println("erro02"); :} programa2;
programa2 ::= PONTO_VIRGULA | error {: System.out.println("erro03"); 


/*
programa ::= PROGRAM IDENTIFICADOR PONTO_VIRGULA bloco PONTO |
             error {:System.out.println("Erro: Estrutura do programa está errada");:} ;
*/
/*
bloco ::= parte_declaracao_variaveis;


parte_declaracao_variaveis ::= tipo lista_identificadores parte_declaracao_variaveis2 | 
                               parte_declaracao_sub_rotinas;

parte_declaracao_variaveis2 ::= PONTO_VIRGULA tipo lista_identificadores parte_declaracao_variaveis2 | PONTO_VIRGULA parte_declaracao_variaveis2 | parte_declaracao_sub_rotinas |
                                error {:System.out.println("Erro: Faltou ;");:};

lista_identificadores ::= variavel lista_identificadores2;

lista_identificadores2 ::= VIRGULA variavel lista_identificadores2 |
                           error {:System.out.println("Erro: Faltou ,");:};


parte_declaracao_sub_rotinas ::= PROCEDURE IDENTIFICADOR declaracao_procedimentos | comando_composto /*|
                                 error {:System.out.println("Erro: Estrutura do procedimento está errada");:}*/;

declaracao_procedimentos ::= PARENTESES_ABRE parametros_formais PARENTESES_FECHA PONTO_VIRGULA bloco declaracao_procedimentos1 | PONTO_VIRGULA bloco declaracao_procedimentos1 |
                             error {:System.out.println("Erro: Declaração procedimentos");:};
                             

declaracao_procedimentos1 ::= PONTO_VIRGULA parte_declaracao_sub_rotinas | comando_composto /*|
                              error {:System.out.println("Erro: Declaração procedimentos");:}*/;

parametros_formais ::= secao_parametros_formais secao_parametros_formais2;

secao_parametros_formais2 ::= PONTO_VIRGULA secao_parametros_formais secao_parametros_formais2 |
                              error {:System.out.println("Erro: Faltou ;");:}                              ;

secao_parametros_formais ::= VAR lista_identificadores DOIS_PONTOS tipo | lista_identificadores DOIS_PONTOS tipo |
                              error {:System.out.println("Erro: Seção de parametros formais");:};

tipo ::= INT | BOOLEAN | REAL |                               
         error {:System.out.println("Erro: Declaração de tipo");:};

comando_composto ::= BEGIN comando comando_composto2 END ;

comando_composto2 ::= PONTO_VIRGULA comando comando_composto2 | 
                      error {:System.out.println("Erro: Faltou ;");:};

comando ::= atribuicao | chamada_procedimento | comando_composto | comando_condicional1 | comando_repetitivo | READ PARENTESES_ABRE lista_identificadores PARENTESES_FECHA | WRITE PARENTESES_ABRE lista_identificadores PARENTESES_FECHA;            

atribuicao ::= variavel OP_ATRIBUICAO expressao |
               error {:System.out.println("Erro: Faltou :=");:};


chamada_procedimento ::= IDENTIFICADOR PARENTESES_ABRE lista_expressoes PARENTESES_FECHA;



////////////////
// Até aqui foi melhorado, os seguintes comandos são ainda mais complexos

comando_condicional1 ::= IF expressao THEN comando_condicional12 comando_condicional2;

comando_condicional12 ::= atribuicao | chamada_procedimento | comando_composto | comando_condicional1 | comando_repetitivo | READ PARENTESES_ABRE lista_identificadores PARENTESES_FECHA | WRITE PARENTESES_ABRE lista_identificadores PARENTESES_FECHA;

comando_condicional2 ::= ELSE comando_condicional12 |
                         error {:System.out.println("Erro: Faltou else");:};

comando_repetitivo ::= WHILE expressao DO comando_repetitivo2;

comando_repetitivo2 ::= atribuicao | chamada_procedimento | BEGIN comando PONTO_VIRGULA comando END | comando_condicional1 | comando_repetitivo;





expressao ::= expressao_simples;

expressao_simples ::= OP_ADICAO termo expressao_simples2 relacao | OP_SUBTRACAO termo expressao_simples2 relacao | termo expressao_simples2 relacao |
                      error {:System.out.println("Erro: Falta um operador + ou -");:}; 
                      

expressao_simples2 ::= OP_ADICAO termo expressao_simples2 | OP_SUBTRACAO termo expressao_simples2 | OP_OR termo expressao_simples2 
                              error {:System.out.println("Erro: Falta um operador + ou - ou OR");:};

relacao ::= SIMBOLO_IGUAL expressao_simples | SIMBOLO_DIFERENTE expressao_simples | SIMBOLO_MENOR expressao_simples | SIMBOLO_MENOR_IGUAL expressao_simples | SIMBOLO_MAIOR_IGUAL expressao_simples | SIMBOLO_MAIOR expressao_simples |
                              error {:System.out.println("Error: Falta um simbolo = ou <> ou < ou <= ou > ou >=");:};



termo ::= fator termo2;

termo2 ::= OP_MULTIPLICACAO fator termo2 | OP_DIVISAO fator termo2| OP_AND fator termo2 |
           error {:System.out.println("Erro: Faltou operador * ou DIV ou AND");:};


fator ::= variavel | NUMERO_INTEIRO | NUMERO_REAL | PARENTESES_ABRE expressao PARENTESES_FECHA | OP_NOT fator | TRUE | FALSE;

lista_expressoes ::= expressao lista_expressoes2;

lista_expressoes2 ::= VIRGULA expressao |
                      error {:System.out.println("Erro: Faltou ,");:};

variavel ::= IDENTIFICADOR;

*/
