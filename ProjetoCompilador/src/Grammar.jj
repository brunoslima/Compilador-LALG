
PARSER_BEGIN(Grammar)
public class Grammar
{

static void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}

}
PARSER_END(Grammar)


TOKEN:
{



    < PROGRAM: "program" >
|   < BEGIN: "begin" >
|   < END: "end" >
|   < PROCEDURE: "procedure" >
|   < VAR: "var" >

|   < INT: "int" >
|   < REAL: "real" >
|   < BOOLEAN: "boolean" >
|   < TRUE: "true" >
|   < FALSE: "false" >

|   < READ: "read" >
|   < WRITE: "write" >

|   < DOIS_PONTOS: ":" >
|   < PONTO_VIRGULA: ";" >
|   < VIRGULA: "," >
|   < PONTO: "." >

|   < IF: "if" >
|   < THEN: "then" >
|   < ELSE: "else" >

|   < WHILE: "while" >
|   < DO: "do" >

|   < SIMBOLO_IGUAL: "=" >
|   < SIMBOLO_DIFERENTE: "<>" >
|   < SIMBOLO_MENOR: "<" >
|   < SIMBOLO_MENOR_IGUAL: "<=" >
|   < SIMBOLO_MAIOR: ">" >
|   < SIMBOLO_MAIOR_IGUAL: ">=" >

|   < OP_ATRIBUICAO: ":=" >
|   < OP_ADICAO: "+" >
|   < OP_SUBTRACAO: "-" >
|   < OP_DIVISAO: "div" >
|   < OP_MULTIPLICACAO: "*" >
|   < OP_AND: "and" >
|   < OP_OR: "or" >
|   < OP_NOT: "not" >

|   < PARENTESES_ABRE: "(" >
|   < PARENTESES_FECHA: ")" >


|   < NUMERO_INTEIRO: (["0"-"9"]){1,10} >
|   < NUMERO_REAL:  (["0"-"9"])+ ( "." (["0"-"9"]){1,6} ) >


|   < IDENTIFICADOR: ["_", "A"-"Z", "a"-"z"](["_", "A"-"Z", "a"-"z"] | (["0"-"9"]) )* >


}

SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
|   <"{" (~["}"] )* "}">
|   <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>

}

void compilationUnit() :
{}
{
    programDeclaration() <EOF>
}

void programDeclaration() :
{}
{
    try{
        <PROGRAM>
    }
    catch(ParseException e) {
        System.out.println("Faltou program");
        error_skipto(IDENTIFICADOR);
    }

    <IDENTIFICADOR> 
    <PONTO_VIRGULA>
}