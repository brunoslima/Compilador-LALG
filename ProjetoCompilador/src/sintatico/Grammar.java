/* Grammar.java */
/* Generated By:JavaCC: Do not edit this line. Grammar.java */
package sintatico;

import java.util.ArrayList;
import semantico.AnalisadorSemantico;
import semantico.TabelaErrosSemantico;
import gerador.Gerador;

public class Grammar implements GrammarConstants {
public static String descricao = "";

static void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  //System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
    if (t.kind == 0) return;
  } while (t.kind != kind);

}

static void error_skipto_before(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  //System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
    t.next = Token.newToken(getToken(1).kind, getToken(1).image);
    if (t.next.kind == 0) return;
  } while (t.next == null || t.next.kind != kind);

}

static void error_skipto(Integer... kind) {
    ArrayList<Integer> lista = new ArrayList();
    for(Integer e: kind){
        lista.add(e);
    }
    Token t;
    do {
        t = getNextToken();
        if (t.kind == 0) return;
    } while (!lista.contains(t.kind));
}

static void error_skipto_before(Integer... kind) {
  ArrayList<Integer> lista = new ArrayList();
  for(Integer e: kind){
        lista.add(e);
  }
  Token t;
  do {
    t = getNextToken();
    t.next = Token.newToken(getToken(1).kind, getToken(1).image);
    if (t.next.kind == 0) return;
  } while (!lista.contains(t.next.kind));
}

static void showMessageError(int line, int column, String message, String descricao){

    String erro = "ERRO - " + message + " - Linha: " + line + " Coluna: " + column + "\u005cn";
    RecuperacaoErros.adicionarErro(erro);

    System.out.println("\u005cn=========================\u005cn" +
        message + "\u005cn" +
        "Linha: " + line + " Coluna: " + column + "\u005cn" +
        descricao
    );
}

  static final public void compilationUnit() throws ParseException {
AnalisadorSemantico.init();
        TabelaErrosSemantico.init();
    try {
      programDeclaration();
    } catch (ParseException e) {
{showMessageError(token.next.beginLine, token.next.beginColumn, "Palavra reservada program esperada", Grammar.descricao);}
        error_skipto(PONTO_VIRGULA);
    }
    try {
      bloco();
token.next = Token.newToken(getToken(1).kind, getToken(1).image);
    } catch (ParseException e) {
System.out.println("N\u00c3\u00a3o deveria passar nunca aqui");
    }
    try {
      jj_consume_token(PONTO);
Gerador.finalizarPrograma();
    } catch (ParseException e) {
showMessageError(e.currentToken.beginLine, e.currentToken.beginColumn, "Ponto final faltando", Grammar.descricao);
    }
    try {
      jj_consume_token(0);
    } catch (ParseException e) {
Token t;
        do{
            t = getNextToken();
            showMessageError(token.beginLine, token.beginColumn, "S\u00c3\u00admbolo inesperado", Grammar.descricao);
        } while(t.kind != EOF);
    }
  }

  static final public void programDeclaration() throws ParseException, ParseException {Token nomePrograma;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PROGRAM:{
      jj_consume_token(PROGRAM);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
{if (true) throw generateParseException();}
    }
    try {
      nomePrograma = jj_consume_token(IDENTIFICADOR);
AnalisadorSemantico.addProcedure(nomePrograma.image, token.beginLine, token.beginColumn);
            AnalisadorSemantico.selectProcedure(nomePrograma.image);
            AnalisadorSemantico.setProgramaPrincipal(nomePrograma.image);

            Gerador.iniciarPrograma(nomePrograma.image);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de programa faltando", Grammar.descricao);
        error_skipto(PONTO_VIRGULA);
        {if ("" != null) return;}
    }
    try {
      jj_consume_token(PONTO_VIRGULA);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e v\u00c3\u00adrgula faltando", Grammar.descricao);
        error_skipto_before(INT, BOOLEAN, REAL, PROCEDURE, BEGIN);
    }
  }

  static final public void bloco() throws ParseException {Token c;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case REAL:
    case BOOLEAN:
    case IDENTIFICADOR:{
      parteDeclaracaoVariaveis();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_1;
      }
      parteDeclaracaoSubRotinas();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PONTO_VIRGULA:{
        jj_consume_token(PONTO_VIRGULA);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
showMessageError(token.next.beginLine, token.next.beginColumn, "Ponto e v\u00c3\u00adrgula faltando", Grammar.descricao);
      }
    }
    comandoComposto();
  }

  static final public String parteDeclaracaoVariaveis() throws ParseException {String a; String s;
a = "";
if (getToken(1).kind == IDENTIFICADOR && getToken(2).kind == IDENTIFICADOR && getToken(3).kind == PARENTESES_ABRE ||
                getToken(1).kind == IDENTIFICADOR && getToken(2).kind == PARENTESES_ABRE ) {

                    {if ("" != null) return a;}
            }
    try {
      s = declaracaoVariaveis();
a += s;
    } catch (ParseException e) {
error_skipto(PONTO_VIRGULA);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case REAL:
      case BOOLEAN:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
if (getToken(1).kind == IDENTIFICADOR && getToken(2).kind == IDENTIFICADOR && getToken(3).kind == PARENTESES_ABRE ||
                getToken(1).kind == IDENTIFICADOR && getToken(2).kind == PARENTESES_ABRE ||
                getToken(1).kind == PROCEDURE) {

                    {if ("" != null) return a;}
                }
      try {
        s = declaracaoVariaveis();
a += s;
      } catch (ParseException e) {
error_skipto(PONTO_VIRGULA);
      }
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public String declaracaoVariaveis() throws ParseException, ParseException {String a; String s; Token t;
t = null;
a = "";
    s = tipo();
a += s;
    s = listaIdentificadores();
a += s;
    if (jj_2_2(2147483647)) {
      t = jj_consume_token(PONTO_VIRGULA);
a += t.image;
    } else {
showMessageError(token.next.beginLine, token.next.beginColumn, "Ponto e v\u00c3\u00adrgula faltando", Grammar.descricao);
    }
AnalisadorSemantico.tabelaAtual.separarVariaveis(a, token.beginLine, token.beginColumn);
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public String listaIdentificadores() throws ParseException {String a; String s; Token t;
t = null;
a = "";
    s = variavel();
a += s;
    label_3:
    while (true) {
      if (jj_2_3(2147483647)) {
        ;
      } else {
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        t = jj_consume_token(VIRGULA);
a += t.image;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
showMessageError(token.beginLine, token.beginColumn, "V\u00c3\u00adrgula faltando", Grammar.descricao);
      }
      s = variavel();
a += s;
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public void parteDeclaracaoSubRotinas() throws ParseException {Token nomeProcedure;
    try {
      jj_consume_token(PROCEDURE);
      try {
        nomeProcedure = jj_consume_token(IDENTIFICADOR);
AnalisadorSemantico.addProcedure(nomeProcedure.image, token.beginLine, token.beginColumn);
                AnalisadorSemantico.selectProcedure(nomeProcedure.image);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de procedure esperado", Grammar.descricao);
            error_skipto_before(PONTO_VIRGULA, PARENTESES_ABRE);
      }
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada procedure esperada", Grammar.descricao);
        error_skipto_before(PONTO_VIRGULA, PARENTESES_ABRE);
    }
    declaracaoProcedimentos();
  }

  static final public void declaracaoProcedimentos() throws ParseException {
    if (jj_2_4(2147483647)) {
      try {
        jj_consume_token(PARENTESES_ABRE);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parentese faltando", Grammar.descricao);
      }
      parametrosFormais();
      try {
        jj_consume_token(PARENTESES_FECHA);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses faltando", Grammar.descricao);
                error_skipto_before(PONTO_VIRGULA, INT, REAL, BOOLEAN, BEGIN);
      }
    } else {
      ;
    }
    try {
      jj_consume_token(PONTO_VIRGULA);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e v\u00c3\u00adrgula faltando", Grammar.descricao);
    }
    bloco();
  }

  static final public void parametrosFormais() throws ParseException {
    secaoParametrosFormais();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PONTO_VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      try {
        jj_consume_token(PONTO_VIRGULA);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e v\u00c3\u00adrgula faltando", Grammar.descricao);
      }
      secaoParametrosFormais();
    }
  }

  static final public void secaoParametrosFormais() throws ParseException {String a; String s;
a = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      try {
        jj_consume_token(VAR);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada var esperada", Grammar.descricao);
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    try {
      s = listaIdentificadores();
a += s;
    } catch (ParseException e) {
if (getToken(1).kind != DOIS_PONTOS) error_skipto_before(DOIS_PONTOS, INT, REAL, BOOLEAN, PARENTESES_FECHA, PONTO_VIRGULA);
    }
    try {
      jj_consume_token(DOIS_PONTOS);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Dois pontos faltando", Grammar.descricao);
    }
    try {
      s = tipo();
a += s;
    } catch (ParseException e) {
if (getToken(1).kind != PARENTESES_FECHA) {
                error_skipto_before(PARENTESES_FECHA, PONTO_VIRGULA, INT, REAL, BOOLEAN, BEGIN);
            }
    }
AnalisadorSemantico.tabelaAtual.separarParametros(a, token.beginLine, token.beginColumn);
  }

  static final public String tipo() throws ParseException, ParseException {Token a;
a = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      a = jj_consume_token(INT);
      break;
      }
    case BOOLEAN:{
      a = jj_consume_token(BOOLEAN);
      break;
      }
    case REAL:{
      a = jj_consume_token(REAL);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
showMessageError(token.next.beginLine, token.next.beginColumn, "Identificador de tipo esperado", Grammar.descricao);
                {if (true) throw generateParseException();}
    }
{if ("" != null) return a.image;}
    throw new Error("Missing return statement in function");
  }

///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
  static final public 
void comandoComposto() throws ParseException {
    try {
      jj_consume_token(BEGIN);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada begin esperada", Grammar.descricao);
            error_skipto(IDENTIFICADOR, READ, WRITE, IF, WHILE);
    }
    try {
      comando();
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Comando estruturado incorretamente", Grammar.descricao);
            if (getToken(1).kind == BEGIN) {
                error_skipto(END);
            }
    }
if (getToken(1).kind == EOF || getToken(1).kind == PONTO) {
                {if ("" != null) return;}
            }
    label_5:
    while (true) {
      ;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case END:{
          jj_consume_token(END);
          if (jj_2_5(2147483647)) {
            jj_consume_token(PONTO_VIRGULA);
showMessageError(token.next.beginLine, token.next.beginColumn, "Ponto e v\u00c3\u00adrgula inesperado", Grammar.descricao);
          } else {
            ;
          }
{if ("" != null) return;}
          break;
          }
        case PONTO_VIRGULA:{
          jj_consume_token(PONTO_VIRGULA);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
showMessageError(token.next.beginLine, token.next.beginColumn, "Comando incorreto, ponto e v\u00c3\u00adrgula faltando ou palavra reservada end faltando", Grammar.descricao);
            error_skipto_before(PONTO_VIRGULA, END);
      }
      try {
        comando();
      } catch (ParseException e) {
//showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Comando estruturado incorretamente", Grammar.descricao);

            if (getToken(1).kind == BEGIN) {
                error_skipto_before(END);
            }
      }
if (getToken(1).kind == EOF || getToken(1).kind == PONTO) {
                showMessageError(token.next.beginLine, token.next.beginColumn, "Comando incorreto, ponto e v\u00c3\u00adrgula faltando ou palavra reservada end faltando", Grammar.descricao);
                {if ("" != null) return;}
            }
    }
  }

  static final public void comando() throws ParseException, ParseException {String s;
    if (jj_2_6(2147483647)) {
      chamadaProcedimento();
    } else if (jj_2_7(2147483647)) {
      comandoComposto();
    } else if (jj_2_8(2147483647)) {
      comandoCondicional();
    } else if (jj_2_9(2147483647)) {
      comandoRepetitivo();
    } else if (jj_2_10(2147483647)) {
      try {
        jj_consume_token(READ);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada read esperada", Grammar.descricao);
      }
      try {
        jj_consume_token(PARENTESES_ABRE);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", Grammar.descricao);
      }
      s = listaIdentificadores();
Gerador.listaVariaveisRead(s);
      try {
        jj_consume_token(PARENTESES_FECHA);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", Grammar.descricao);
      }
    } else if (jj_2_11(2147483647)) {
      try {
        jj_consume_token(WRITE);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada write esperada", Grammar.descricao);
      }
      try {
        jj_consume_token(PARENTESES_ABRE);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", Grammar.descricao);
      }
      s = listaIdentificadores();
Gerador.listaVariaveisWrite(s);
      try {
        jj_consume_token(PARENTESES_FECHA);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", Grammar.descricao);
      }
    } else if (jj_2_12(2147483647)) {
      atribuicao();
    } else {
{if (true) throw generateParseException();}
    }
  }

  static final public void atribuicao() throws ParseException, ParseException {String v; String valor;
valor = "";
    v = variavel();
    try {
      jj_consume_token(OP_ATRIBUICAO);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador de atribui\u00c3\u00a7\u00c3\u00a3o esperado", Grammar.descricao);
    }
    if (jj_2_13(2147483647)) {
showMessageError(token.next.beginLine, token.next.beginColumn, "Faltou informar o que ser\u00c3\u00a1 atribuido", Grammar.descricao);
                    error_skipto_before(PONTO_VIRGULA,END);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case OP_ADICAO:
      case OP_SUBTRACAO:
      case OP_NOT:
      case PARENTESES_ABRE:
      case NUMERO_INTEIRO:
      case NUMERO_REAL:
      case IDENTIFICADOR:{
        valor = expressao();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
Gerador.atribuicaoVariavel(v);
AnalisadorSemantico.tabelaAtual.atribuirValor(v,valor,token.beginLine,token.beginColumn);
  }

  static final public void chamadaProcedimento() throws ParseException {
    try {
      jj_consume_token(IDENTIFICADOR);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de procedimento esperado", Grammar.descricao);
    }
    try {
      jj_consume_token(PARENTESES_ABRE);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", Grammar.descricao);
    }
    listaExpressoes();
    try {
      jj_consume_token(PARENTESES_FECHA);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", Grammar.descricao);
    }
  }

  static final public void comandoCondicional() throws ParseException, ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      jj_consume_token(IF);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
showMessageError(token.next.beginLine, token.next.beginColumn, "Palavra reservada IF esperada", Grammar.descricao);
        if (getToken(1).kind != BEGIN) {
            error_skipto_before(BEGIN, PONTO_VIRGULA);
        }
        {if (true) throw generateParseException();}
    }
    expressao();
if (getToken(1).kind == PARENTESES_FECHA) {
            showMessageError(token.next.beginLine, token.next.beginColumn, "Fecha parenteses inesperado", Grammar.descricao);
            error_skipto_before(THEN, PONTO_VIRGULA, BEGIN);
        }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THEN:{
      jj_consume_token(THEN);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
showMessageError(token.next.beginLine, token.next.beginColumn, "Palavra reservada THEN esperada", Grammar.descricao);
        if (getToken(1).kind != BEGIN) {
            error_skipto_before(BEGIN, PONTO_VIRGULA);
        }
    }
Gerador.verificaIf();
    comando();
Gerador.desvioIf();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
Gerador.verificaElse();
      comando();
Gerador.desvioElse();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void comandoRepetitivo() throws ParseException, ParseException {
    try {
      jj_consume_token(WHILE);
Gerador.setExpressao(Gerador.getContador());
      expressao();
Gerador.verificaWhile();
    } catch (ParseException e) {
showMessageError(token.next.beginLine, token.next.beginColumn, "Palavra reservada WHILE esperada", Grammar.descricao);
        if (getToken(1).kind != DO) {
            error_skipto_before(DO, PONTO_VIRGULA, BEGIN, PONTO);
        }
    }
    try {
      jj_consume_token(DO);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada DO esperada", Grammar.descricao);
        if (getToken(1).kind != BEGIN) {
            error_skipto_before(IDENTIFICADOR, BEGIN, IF, WHILE, READ, WRITE);
        }
    }
    comando();
Gerador.desvioWhile();
  }

  static final public String expressao() throws ParseException {String simboloRelacao = ""; String valor; String s;
s = "";
valor = "";
    try {
      s = expressaoSimples();
valor += s;
    } catch (ParseException e) {
error_skipto_before(END,PONTO_VIRGULA,PONTO, THEN, DO);
    }
    if (jj_2_14(2147483647)) {
      try {
        simboloRelacao = relacao();
valor += simboloRelacao;
      } catch (ParseException e) {

      }
      try {
        s = expressaoSimples();
valor += s;

      } catch (ParseException e) {
error_skipto_before(END,PONTO_VIRGULA,PONTO, THEN, DO);
      }
//montar comparação
            Gerador.verificaRelacao(simboloRelacao);
    } else {
      ;
    }
{if ("" != null) return valor;}
    throw new Error("Missing return statement in function");
  }

  static final public String expressaoSimples() throws ParseException {String valor; String s; Token t;
valor = "";
s = "";
t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OP_ADICAO:
    case OP_SUBTRACAO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_ADICAO:{
        t = jj_consume_token(OP_ADICAO);
        break;
        }
      case OP_SUBTRACAO:{
        t = jj_consume_token(OP_SUBTRACAO);
Gerador.inverterSinal();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
valor += t.image;
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    s = termo();
valor += s;
    label_6:
    while (true) {
      if (jj_2_15(2147483647)) {
        ;
      } else {
        break label_6;
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OP_ADICAO:{
          t = jj_consume_token(OP_ADICAO);
          break;
          }
        case OP_SUBTRACAO:{
          t = jj_consume_token(OP_SUBTRACAO);
          break;
          }
        case OP_OR:{
          t = jj_consume_token(OP_OR);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
valor += t.image;
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador l\u00c3\u00b3gico ou aritm\u00c3\u00a9tico esperado", Grammar.descricao);
      }
      s = termo();
valor += s;
Gerador.verificarOperador(t.image);
    }
{if ("" != null) return valor;}
    throw new Error("Missing return statement in function");
  }

  static final public String relacao() throws ParseException {String valor; String s; Token t;
s = "";
valor = "";
t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIMBOLO_IGUAL:{
        t = jj_consume_token(SIMBOLO_IGUAL);
        break;
        }
      case SIMBOLO_DIFERENTE:{
        t = jj_consume_token(SIMBOLO_DIFERENTE);
        break;
        }
      case SIMBOLO_MENOR:{
        t = jj_consume_token(SIMBOLO_MENOR);
        break;
        }
      case SIMBOLO_MENOR_IGUAL:{
        t = jj_consume_token(SIMBOLO_MENOR_IGUAL);
        break;
        }
      case SIMBOLO_MAIOR_IGUAL:{
        t = jj_consume_token(SIMBOLO_MAIOR_IGUAL);
        break;
        }
      case SIMBOLO_MAIOR:{
        t = jj_consume_token(SIMBOLO_MAIOR);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
valor += t.image;
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador l\u00c3\u00b3gico ou aritm\u00c3\u00a9tico esperado", Grammar.descricao);
    }
{if ("" != null) return valor;}
    throw new Error("Missing return statement in function");
  }

  static final public String termo() throws ParseException {String valor; String s; Token t;
valor = "";
s = "";
t = null;
    try {
      s = fator();
valor += s;
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Express\u00c3\u00a3o condicional esperada", Grammar.descricao);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_DIVISAO:
      case OP_MULTIPLICACAO:
      case OP_AND:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OP_MULTIPLICACAO:{
          t = jj_consume_token(OP_MULTIPLICACAO);
          break;
          }
        case OP_DIVISAO:{
          t = jj_consume_token(OP_DIVISAO);
          break;
          }
        case OP_AND:{
          t = jj_consume_token(OP_AND);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
s = t.image;
valor += s;
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador de multiplica\u00c3\u00a7\u00c3\u00a3o ou adi\u00c3\u00a7\u00c3\u00a3o ou divis\u00c3\u00a3o esperado", Grammar.descricao);
      }
      try {
        s = fator();
valor += s;
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Express\u00c3\u00a3o condicional esperada", Grammar.descricao);
      }
Gerador.verificarOperador(t.image);
    }
{if ("" != null) return valor;}
    throw new Error("Missing return statement in function");
  }

  static final public String fator() throws ParseException {String valor = ""; String s = ""; Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      s = variavel();
valor += s;
Gerador.carregarValorDaVariavel(s);
      break;
      }
    case NUMERO_INTEIRO:
    case NUMERO_REAL:{
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMERO_INTEIRO:{
          t = jj_consume_token(NUMERO_INTEIRO);
          break;
          }
        case NUMERO_REAL:{
          t = jj_consume_token(NUMERO_REAL);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
valor += t.image;
Gerador.carregarValorConstante(Integer.parseInt(t.image));
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "N\u00c3\u00bamero inteiro ou real esperado", Grammar.descricao);
      }
      break;
      }
    case PARENTESES_ABRE:{
      try {
        t = jj_consume_token(PARENTESES_ABRE);
valor += t.image;
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", Grammar.descricao);
      }
      s = expressao();
valor += s;
      try {
        t = jj_consume_token(PARENTESES_FECHA);
valor += t.image;
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", Grammar.descricao);
      }
      break;
      }
    case OP_NOT:{
      try {
        t = jj_consume_token(OP_NOT);
valor += t.image;
Gerador.verificarOperador(t.image);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador not esperado", Grammar.descricao);
      }
      s = fator();
valor += s;
      break;
      }
    case TRUE:
    case FALSE:{
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:{
          t = jj_consume_token(TRUE);
          break;
          }
        case FALSE:{
          t = jj_consume_token(FALSE);
valor += t.image;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Tipo de dado boleano(TRUE ou FALSE) esperado", Grammar.descricao);
      }
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return valor;}
    throw new Error("Missing return statement in function");
  }

  static final public void listaExpressoes() throws ParseException {
    expressao();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
      try {
        jj_consume_token(VIRGULA);
      } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Virgula esperada", Grammar.descricao);
      }
      expressao();
    }
  }

  static final public String variavel() throws ParseException {Token a;
a = null;
    try {
      a = jj_consume_token(IDENTIFICADOR);
    } catch (ParseException e) {
showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador esperado", Grammar.descricao);
    }
{if ("" != null) return a.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_3_11()
 {
    if (jj_scan_token(WRITE)) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_scan_token(PARENTESES_ABRE)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(PARENTESES_FECHA)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_13()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(DOIS_PONTOS)) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_9()
 {
    if (jj_scan_token(PROCEDURE)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PARENTESES_ABRE)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(DO)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) return true;
    }
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(DOIS_PONTOS)) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(VIRGULA)) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(READ)) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_scan_token(OP_SUBTRACAO)) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(THEN)) return true;
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(PONTO_VIRGULA)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PONTO_VIRGULA)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    }
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PARENTESES_ABRE)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(PARENTESES_FECHA)) return true;
    if (jj_scan_token(PONTO_VIRGULA)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(PONTO_VIRGULA)) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PARENTESES_ABRE)) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(OP_ATRIBUICAO)) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_scan_token(OP_NOT)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(PONTO_VIRGULA)) return true;
    if (jj_scan_token(PONTO)) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_3R_26()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x1c0,0x4000,0x1c0,0x8000,0x4000,0x20,0x1c0,0x4008,0x60000600,0x20000,0x40000,0x80000,0x60000000,0x60000000,0x60000000,0xfc00000,0x80000000,0x80000000,0x0,0x600,0x600,0x8000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x1d8,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x3,0x3,0xc0,0x0,0x1d8,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[15];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
