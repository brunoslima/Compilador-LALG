options
{
  LOOKAHEAD=2;
}
PARSER_BEGIN(Grammar)
package sintatico;

public class Grammar
{

static void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}

static void showMessageError(int line, int column, String message, String descricao){
    
    System.out.println(
        message + "\n" +
        "Linha: " + line + " Coluna: " + column + "\n" +
        descricao
    );
}

}
PARSER_END(Grammar)


TOKEN:
{

    < PROGRAM: "program" >
|   < BEGIN: "begin" >
|   < END: "end" >
|   < PROCEDURE: "procedure" >
|   < VAR: "var" >

|   < INT: "int" >
|   < REAL: "real" >
|   < BOOLEAN: "boolean" >
|   < TRUE: "true" >
|   < FALSE: "false" >

|   < READ: "read" >
|   < WRITE: "write" >

|   < DOIS_PONTOS: ":" >
|   < PONTO_VIRGULA: ";" >
|   < VIRGULA: "," >
|   < PONTO: "." >

|   < IF: "if" >
|   < THEN: "then" >
|   < ELSE: "else" >

|   < WHILE: "while" >
|   < DO: "do" >

|   < SIMBOLO_IGUAL: "=" >
|   < SIMBOLO_DIFERENTE: "<>" >
|   < SIMBOLO_MENOR: "<" >
|   < SIMBOLO_MENOR_IGUAL: "<=" >
|   < SIMBOLO_MAIOR: ">" >
|   < SIMBOLO_MAIOR_IGUAL: ">=" >

|   < OP_ATRIBUICAO: ":=" >
|   < OP_ADICAO: "+" >
|   < OP_SUBTRACAO: "-" >
|   < OP_DIVISAO: "div" >
|   < OP_MULTIPLICACAO: "*" >
|   < OP_AND: "and" >
|   < OP_OR: "or" >
|   < OP_NOT: "not" >

|   < PARENTESES_ABRE: "(" >
|   < PARENTESES_FECHA: ")" >


|   < NUMERO_INTEIRO: (["0"-"9"]){1,10} >
|   < NUMERO_REAL:  (["0"-"9"])+ ( "." (["0"-"9"]){1,6} ) >


|   < IDENTIFICADOR: ["_", "A"-"Z", "a"-"z"](["_", "A"-"Z", "a"-"z"] | (["0"-"9"]) )* >


}

SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
|   <"{" (~["}"] )* "}">
|   <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>

}

void compilationUnit() :
{}
{
    programDeclaration() <EOF>
}

void programDeclaration() :
{}
{
    try{
        <PROGRAM>
    }
    catch(ParseException e) {
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada program esperada", "Descrição");
        //error_skipto(IDENTIFICADOR);
    }
    
    try {
        <IDENTIFICADOR>
    }
    catch(ParseException e){
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de programa faltando", "Descrição");
    }
     
    try{
        <PONTO_VIRGULA>
    }
    catch(ParseException e){
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", "Descrição");
    }

    bloco()
    try {
        <PONTO>
    }
    catch(ParseException e){
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto final faltando", "Descrição");
    }

    
}

void bloco() :
{}
{
    [parteDeclaracaoVariaveis()]
    (
        parteDeclaracaoSubRotinas() 
        try{
            <PONTO_VIRGULA>
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", "Descrição");
        }
    )*
    comandoComposto()
}

void parteDeclaracaoVariaveis() :
{}
{

    ( 
        declaracaoVariaveis() 
        (
            try{
                <PONTO_VIRGULA>
            }
            catch(ParseException e){
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", "Descrição");
            }
            declaracaoVariaveis()
        )* 

        try{
            <PONTO_VIRGULA>
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", "Descrição");
        }
    )
   
}

void declaracaoVariaveis() :
{}
{
    tipo() listaIdentificadores()
}

void listaIdentificadores() :
{}
{ 
    ( 
        variavel() 
        (
            try{
                <VIRGULA>
            }
            catch(ParseException e){
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Vírgula faltando", "Descrição");
            } 
            variavel()
        )* 
    )
}


void parteDeclaracaoSubRotinas() :
{}
{   
    
    try{
        <PROCEDURE>
    }
    catch(ParseException e){
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada procedure esperada", "Descrição");
    }

    try{
        <IDENTIFICADOR>
    }
    catch(ParseException e){
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de procedure esperado", "Descrição");
    }


    declaracaoProcedimentos() 

}



void declaracaoProcedimentos() :
{}
{    
    ( 
        [
            try{
                <PARENTESES_ABRE>
            }
            catch(ParseException e){
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parentese faltando", "Descrição");
            }
            parametrosFormais() 
            try{
                <PARENTESES_FECHA>
            }
            catch(ParseException e){
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses faltando", "Descrição");
            }
        ] 
        try{
            <PONTO_VIRGULA>
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", "Descrição");
        }
        bloco() 
    ) 

}

void parametrosFormais() : 
{}
{
    
    secaoParametrosFormais() 
    (
        try{
            <PONTO_VIRGULA>
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", "Descrição");
        } 
        secaoParametrosFormais()
    )*

}

void secaoParametrosFormais() :
{}
{
    ( 
        [
            try{
                <VAR>
            }
            catch(ParseException e){
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada var esperada", "Descrição");
            }
        ] 
        listaIdentificadores() 
        try{
            <DOIS_PONTOS>
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Dois pontos faltando", "Descrição");
        }
        tipo() 
    )

}

void tipo() :
{}
{

    try{
        <INT> 
        | 
        <BOOLEAN> 
        | 
        <REAL>
    }
    catch(ParseException e){
        
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de tipo esperado", "Descrição");
    }
}

void comandoComposto() :
{}
{
    ( 
        try{
            <BEGIN> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada begin esperada", "Descrição");
        }
        
        comando() 
        (
            try{
                <PONTO_VIRGULA>
            }
            catch(ParseException e){
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", "Descrição");
            } 
            comando()
        )* 
        try{
            <END>
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada end esperada", "Descrição");
        }
    )

}

void comando() :
{}
{

    atribuicao()
    | 
    chamadaProcedimento() 
    | 
    comandoComposto() 
    | 
    comandoCondicional() 
    | 
    comandoRepetitivo()
    | 
    ( 
        try{
            <READ> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada read esperada", "Descrição");
        }
        try{
            <PARENTESES_ABRE> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", "Descrição");
        }
        
        listaIdentificadores() 
        try{
            <PARENTESES_FECHA> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", "Descrição");
        }
    )
    | 
    ( 
        try{
            <WRITE> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada write esperada", "Descrição");
        }
        try{
            <PARENTESES_ABRE> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", "Descrição");
        }
        listaIdentificadores() 
        try{
            <PARENTESES_FECHA> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", "Descrição");
        }
        
    )

}

void atribuicao() :
{}
{

    ( 
        variavel() 
        try{
            <OP_ATRIBUICAO> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador de atribuição esperado", "Descrição");
        }
        expressao() 
    )

}

void chamadaProcedimento() :
{}
{

    ( 
        try{
            <IDENTIFICADOR> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de procedimento esperado", "Descrição");
        }
        try{
            <PARENTESES_ABRE> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", "Descrição");
        }
        listaExpressoes() 
        try{
            <PARENTESES_FECHA> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", "Descrição");
        }
    )

}

void comandoCondicional() :
{}
{
    <IF> expressao() <THEN> comando() [<ELSE> comando()]
}

void comandoRepetitivo() :
{}
{
    ( <WHILE> expressao() <DO> comando() )
}

void expressao() :
{}
{
    expressaoSimples() [relacao() expressaoSimples()]
}

void expressaoSimples() :
{}
{
    [<OP_ADICAO>|<OP_SUBTRACAO>] termo() ((<OP_ADICAO> | <OP_SUBTRACAO> | <OP_OR>) termo())*
}

void relacao() :
{}
{
    (<SIMBOLO_IGUAL> | <SIMBOLO_DIFERENTE> | <SIMBOLO_MENOR> | <SIMBOLO_MENOR_IGUAL> | <SIMBOLO_MAIOR_IGUAL> | <SIMBOLO_MAIOR>)
}

void termo() :
{}
{
    fator() ((<OP_MULTIPLICACAO> | <OP_DIVISAO> | <OP_AND>) fator())*
}


void fator() :
{}
{
    variavel() | 
    <NUMERO_INTEIRO> | 
    <NUMERO_REAL> | 
    (<PARENTESES_ABRE> expressao() <PARENTESES_FECHA>) | 
    (<OP_NOT> fator()) | 
    <TRUE> | 
    <FALSE>
}

void listaExpressoes() :
{}
{
    expressao() (<VIRGULA> expressao())*
}


void variavel() :
{}
{
    <IDENTIFICADOR>
}
