options
{
  
}
PARSER_BEGIN(Grammar)
package sintatico;

import java.util.ArrayList;
import semantico.AnalisadorSemantico;
import semantico.TabelaErrosSemantico;
import gerador.Gerador;

public class Grammar
{
public static String descricao = "";

static void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  //System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
    if (t.kind == 0) return;
  } while (t.kind != kind);

}

static void error_skipto_before(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  //System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
    t.next = Token.newToken(getToken(1).kind, getToken(1).image);
    if (t.next.kind == 0) return;
  } while (t.next == null || t.next.kind != kind);

}

static void error_skipto(Integer... kind) {
    ArrayList<Integer> lista = new ArrayList();
    for(Integer e: kind){
        lista.add(e);
    }
    Token t;
    do {
        t = getNextToken();
        if (t.kind == 0) return;
    } while (!lista.contains(t.kind));
}

static void error_skipto_before(Integer... kind) {
  ArrayList<Integer> lista = new ArrayList();
  for(Integer e: kind){
        lista.add(e);
  }
  Token t;
  do {
    t = getNextToken();
    t.next = Token.newToken(getToken(1).kind, getToken(1).image);
    if (t.next.kind == 0) return;
  } while (!lista.contains(t.next.kind));
}

static void showMessageError(int line, int column, String message, String descricao){
  
    String erro = "ERRO - " + message + " - Linha: " + line + " Coluna: " + column + "\n";
    RecuperacaoErros.adicionarErro(erro);
  
    System.out.println("\n=========================\n" +
        message + "\n" +
        "Linha: " + line + " Coluna: " + column + "\n" +
        descricao
    );
}

}
PARSER_END(Grammar)


TOKEN:
{

    < PROGRAM: "program" >
|   < BEGIN: "begin" >
|   < END: "end" >
|   < PROCEDURE: "procedure" >
|   < VAR: "var" >

|   < INT: "int" >
|   < REAL: "real" >
|   < BOOLEAN: "boolean" >
|   < TRUE: "true" >
|   < FALSE: "false" >

|   < READ: "read" >
|   < WRITE: "write" >

|   < DOIS_PONTOS: ":" >
|   < PONTO_VIRGULA: ";" >
|   < VIRGULA: "," >
|   < PONTO: "." >

|   < IF: "if" >
|   < THEN: "then" >
|   < ELSE: "else" >

|   < WHILE: "while" >
|   < DO: "do" >

|   < SIMBOLO_IGUAL: "=" >
|   < SIMBOLO_DIFERENTE: "<>" >
|   < SIMBOLO_MENOR: "<" >
|   < SIMBOLO_MENOR_IGUAL: "<=" >
|   < SIMBOLO_MAIOR: ">" >
|   < SIMBOLO_MAIOR_IGUAL: ">=" >

|   < OP_ATRIBUICAO: ":=" >
|   < OP_ADICAO: "+" >
|   < OP_SUBTRACAO: "-" >
|   < OP_DIVISAO: "div" >
|   < OP_MULTIPLICACAO: "*" >
|   < OP_AND: "and" >
|   < OP_OR: "or" >
|   < OP_NOT: "not" >

|   < PARENTESES_ABRE: "(" >
|   < PARENTESES_FECHA: ")" >


|   < NUMERO_INTEIRO: (["0"-"9"]){1,10} >
|   < NUMERO_REAL:  (["0"-"9"])+ ( "." (["0"-"9"]){1,6} ) >


|   < IDENTIFICADOR: ["_", "A"-"Z", "a"-"z"](["_", "A"-"Z", "a"-"z"] | (["0"-"9"]) )* >


}

SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
|   <"{" (~["}"] )* "}">
|   <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>

}

void compilationUnit() :
{}
{
    {
        AnalisadorSemantico.init();
        TabelaErrosSemantico.init();
    }

    try{

        programDeclaration() 
    }
    catch(ParseException e){
        {showMessageError(token.next.beginLine, token.next.beginColumn, "Palavra reservada program esperada", Grammar.descricao);}
        error_skipto(PONTO_VIRGULA);
    }

    try{
        bloco()
        {token.next = Token.newToken(getToken(1).kind, getToken(1).image);}
    }
    catch(ParseException e){
        System.out.println("Não deveria passar nunca aqui");
    }

    try{
        <PONTO>
        {AnalisadorSemantico.verificaVariaveisNaoUtilizadas();}
        {AnalisadorSemantico.verificaProcedimentosNaoUtilizados();}
        {Gerador.finalizarPrograma();}
    }
    catch(ParseException e){
        showMessageError(e.currentToken.beginLine, e.currentToken.beginColumn, "Ponto final faltando", Grammar.descricao);
    }

    try{
        <EOF>
    }
    catch(ParseException e){
        Token t;
        do{
            t = getNextToken();
            showMessageError(token.beginLine, token.beginColumn, "Símbolo inesperado", Grammar.descricao);
        } while(t.kind != EOF);
    }
}

void programDeclaration() throws ParseException:
{Token nomePrograma; }
{
    (
        <PROGRAM>
    |
        {throw generateParseException();}
    )
    
    try{

        nomePrograma = <IDENTIFICADOR>

        {   
            AnalisadorSemantico.addProcedure(nomePrograma.image, token.beginLine, token.beginColumn);
            AnalisadorSemantico.selectProcedure(nomePrograma.image);
            AnalisadorSemantico.setProgramaPrincipal(nomePrograma.image);     

            Gerador.iniciarPrograma(nomePrograma.image);
        }
    }
    catch (ParseException e){
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de programa faltando", Grammar.descricao);
        error_skipto(PONTO_VIRGULA);
        return;
    }
    
     
    try{
        <PONTO_VIRGULA>
    }
    catch(ParseException e){
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", Grammar.descricao);
        error_skipto_before(INT, BOOLEAN, REAL, PROCEDURE, BEGIN);
    }

}

void bloco() :
{Token c;}
{   
    
    [
        //LOOKAHEAD(tipo() <IDENTIFICADOR><PONTO_VIRGULA> | tipo() <IDENTIFICADOR><VIRGULA>)
        parteDeclaracaoVariaveis()
    ]

    
    (
        LOOKAHEAD(<PROCEDURE> <IDENTIFICADOR> <PARENTESES_ABRE> | <IDENTIFICADOR> <IDENTIFICADOR> <PARENTESES_ABRE> | <PROCEDURE>)
        (
            
            parteDeclaracaoSubRotinas()

            (
                <PONTO_VIRGULA>
            |
                {showMessageError(token.next.beginLine, token.next.beginColumn, "Ponto e vírgula faltando", Grammar.descricao);}
            )
        )
    )*
    
    comandoComposto()
}

String parteDeclaracaoVariaveis():
{String a; String s;}
{
    {a = "";}
    ( 

        {
            if (getToken(1).kind == IDENTIFICADOR && getToken(2).kind == IDENTIFICADOR && getToken(3).kind == PARENTESES_ABRE ||
                getToken(1).kind == IDENTIFICADOR && getToken(2).kind == PARENTESES_ABRE ) {
            
                    return a;
            }
        }
        try{
            s = declaracaoVariaveis()
            {a += s;}
        }
        catch(ParseException e){
            error_skipto(PONTO_VIRGULA);
        }

        (
            {
            if (getToken(1).kind == IDENTIFICADOR && getToken(2).kind == IDENTIFICADOR && getToken(3).kind == PARENTESES_ABRE ||
                getToken(1).kind == IDENTIFICADOR && getToken(2).kind == PARENTESES_ABRE ||
                getToken(1).kind == PROCEDURE) {
            
                    return a;
                }
            }
            try{
                s = declaracaoVariaveis()
                {a += s;}
            }
            catch(ParseException e){
                error_skipto(PONTO_VIRGULA);
            }
        )* 
    )

    {return a;}

}

String declaracaoVariaveis() throws ParseException:
{String a; String s; Token t;}
{
    {t = null;}
    {a = "";}
    s = tipo()
    {a += s;}
    s = listaIdentificadores()
    {a += s;}
    (
        LOOKAHEAD(<PONTO_VIRGULA>)
        t = <PONTO_VIRGULA>
        {a += t.image;}
        |
        {showMessageError(token.next.beginLine, token.next.beginColumn, "Ponto e vírgula faltando", Grammar.descricao);}
    )
    
    {AnalisadorSemantico.tabelaAtual.separarVariaveis(a, token.beginLine, token.beginColumn);}
    {return a;}
}

String listaIdentificadores() :
{String a; String s; Token t;}
{ 
    {t = null;}
    {a = "";}
    ( 
        s = variavel()
        {   
            a += s;
        }
        (
            
            LOOKAHEAD(<VIRGULA><IDENTIFICADOR>|<IDENTIFICADOR>|<VIRGULA>)
            (   
                t = <VIRGULA>
                {a += t.image;}
                |
                {showMessageError(token.beginLine, token.beginColumn, "Vírgula faltando", Grammar.descricao);}
            )
            s = variavel()
            {a += s;}
        )* 
    )

    {return a;}

}



void parteDeclaracaoSubRotinas() :
{Token nomeProcedure;}
{   
    
    try{
        <PROCEDURE>

        try{
            nomeProcedure = <IDENTIFICADOR>

            {   
                AnalisadorSemantico.addProcedure(nomeProcedure.image, token.beginLine, token.beginColumn);
                AnalisadorSemantico.selectProcedure(nomeProcedure.image);
            }
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de procedure esperado", Grammar.descricao);
            error_skipto_before(PONTO_VIRGULA, PARENTESES_ABRE);
        }
    }
    catch(ParseException e){
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada procedure esperada", Grammar.descricao);
        error_skipto_before(PONTO_VIRGULA, PARENTESES_ABRE);
  
    }

    declaracaoProcedimentos() 

}



void declaracaoProcedimentos() :
{}
{    
    ( 
        [
            LOOKAHEAD(<PARENTESES_ABRE>|<VAR>|<IDENTIFICADOR><VIRGULA>|<IDENTIFICADOR><DOIS_PONTOS>)
            try{
                <PARENTESES_ABRE>
            }
            catch(ParseException e){
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parentese faltando", Grammar.descricao);
            }

            parametrosFormais() 

            try{
                <PARENTESES_FECHA>
            }
            catch(ParseException e){
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses faltando", Grammar.descricao);
                error_skipto_before(PONTO_VIRGULA, INT, REAL, BOOLEAN, BEGIN);
            }
        ] 

        try{
            <PONTO_VIRGULA>
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", Grammar.descricao);
        }
        bloco()
        {AnalisadorSemantico.selectProcedure(AnalisadorSemantico.getProgramaPrincipal());} 
    ) 

}

void parametrosFormais() : 
{}
{
    
    secaoParametrosFormais() 
    (
        try{
            <PONTO_VIRGULA>
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Ponto e vírgula faltando", Grammar.descricao);
        } 
        secaoParametrosFormais()
    )*

}

void secaoParametrosFormais() :
{String a; String s;}
{
    {a = "";}
    ( 
        [
            try{
                <VAR>
            }
            catch(ParseException e){
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada var esperada", Grammar.descricao);
            }
        ] 

        try{
            s = listaIdentificadores() 
            {a += s;}
        }
        catch(ParseException e){
            if (getToken(1).kind != DOIS_PONTOS) error_skipto_before(DOIS_PONTOS, INT, REAL, BOOLEAN, PARENTESES_FECHA, PONTO_VIRGULA);
        }

        try{
            <DOIS_PONTOS>
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Dois pontos faltando", Grammar.descricao);
        }
        
        
        try{
            s = tipo() 
            {a += s;}
        }
        catch(ParseException e){
            
            if (getToken(1).kind != PARENTESES_FECHA) {
                error_skipto_before(PARENTESES_FECHA, PONTO_VIRGULA, INT, REAL, BOOLEAN, BEGIN);
            }
        }
        
    )

    {AnalisadorSemantico.tabelaAtual.separarParametros(a, token.beginLine, token.beginColumn);}

}

String tipo() throws ParseException:
{Token a;}
{
    {a = null;}
    
    (
        a = <INT>
        | 
        a = <BOOLEAN> 
        | 
        a = <REAL>
        |
        (
            {
                showMessageError(token.next.beginLine, token.next.beginColumn, "Identificador de tipo esperado", Grammar.descricao);
                throw generateParseException();
            }
        )
    )

    {return a.image;}
    
}

///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////

void comandoComposto():
{}
{
    ( 
        try{
            <BEGIN> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada begin esperada", Grammar.descricao);
            error_skipto(IDENTIFICADOR, READ, WRITE, IF, WHILE);
        }

        try{
            comando() 
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Comando estruturado incorretamente", Grammar.descricao);
            if (getToken(1).kind == BEGIN) {
                error_skipto(END);
            }
        }
        {
            if (getToken(1).kind == EOF || getToken(1).kind == PONTO) {
                return;
            }
        }
        (
        LOOKAHEAD(<END>|<PONTO_VIRGULA>|comando())
        try{
            (
                <END>
                
                [
                    LOOKAHEAD(<PONTO_VIRGULA><PONTO>|<PONTO_VIRGULA><END>)
                    <PONTO_VIRGULA>
                    {
                        showMessageError(token.next.beginLine, token.next.beginColumn, "Ponto e vírgula inesperado", Grammar.descricao);
                    }
                ]
                {return;}
            |
                <PONTO_VIRGULA>
            )
        }
        catch(ParseException e){

            showMessageError(token.next.beginLine, token.next.beginColumn, "Comando incorreto, ponto e vírgula faltando ou palavra reservada end faltando", Grammar.descricao);
            error_skipto_before(PONTO_VIRGULA, END);
        }

        try{
            comando() 
        }
        catch(ParseException e){
            //showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Comando estruturado incorretamente", Grammar.descricao);
            
            if (getToken(1).kind == BEGIN) {
                error_skipto_before(END);
            }
        }

        {
            if (getToken(1).kind == EOF || getToken(1).kind == PONTO) {
                showMessageError(token.next.beginLine, token.next.beginColumn, "Comando incorreto, ponto e vírgula faltando ou palavra reservada end faltando", Grammar.descricao);
                return;
            }
        
        }
        )*


    )

}

void comando() throws ParseException:
{String s; }
{   
    LOOKAHEAD(<IDENTIFICADOR> <PARENTESES_ABRE> expressao() <PARENTESES_FECHA> <PONTO_VIRGULA>)
    (
        
        chamadaProcedimento() 
    )
    | 
    LOOKAHEAD(<BEGIN>)
    (
        comandoComposto() 
    )
    | 
    LOOKAHEAD(<IF>|<IDENTIFICADOR> expressao() <THEN>)
    (    
        comandoCondicional() 
    )
    | 
    LOOKAHEAD(<WHILE>|<IDENTIFICADOR> expressao() <DO>)
    (
        comandoRepetitivo()
    )
    |
    LOOKAHEAD(<READ>)
    ( 
        try{
            <READ> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada read esperada", Grammar.descricao);
        }
        try{
            <PARENTESES_ABRE> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", Grammar.descricao);
        }
        
        s = listaIdentificadores()
        {AnalisadorSemantico.verificaTiposParametrosRW(s,token.beginLine,token.beginColumn,0);}
        {
            Gerador.listaVariaveisRead(s);
        }
        try{
            <PARENTESES_FECHA> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", Grammar.descricao);
        }
    )
    | 
    LOOKAHEAD(<WRITE>)
    ( 
        try{
            <WRITE> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada write esperada", Grammar.descricao);
        }
        try{
            <PARENTESES_ABRE> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", Grammar.descricao);
        }
        s = listaIdentificadores()
        {AnalisadorSemantico.verificaTiposParametrosRW(s,token.beginLine,token.beginColumn,1);} 
        {AnalisadorSemantico.verificaVariavelUtilizadaRM(s,token.beginLine,token.beginColumn);}
        {
            Gerador.listaVariaveisWrite(s);
        }

        try{
            <PARENTESES_FECHA> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", Grammar.descricao);
        }
        
    )
    |
    LOOKAHEAD(<IDENTIFICADOR> <OP_ATRIBUICAO> | <IDENTIFICADOR> <DOIS_PONTOS>)
    (
        
        atribuicao()
    )
    |
    (
        {throw generateParseException();}
    )

}

void atribuicao() throws ParseException:
{String v; String valor;}
{
    {valor = "";}
    ( 
        v = variavel() 
        try{
            <OP_ATRIBUICAO >
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador de atribuição esperado", Grammar.descricao);
        }
        
        (   
            LOOKAHEAD(<PONTO_VIRGULA>|<END>)
            (
                    {showMessageError(token.next.beginLine, token.next.beginColumn, "Faltou informar o que será atribuido", Grammar.descricao);
                    error_skipto_before(PONTO_VIRGULA,END);}
            )
            |
            valor = expressao() 
        )

        {Gerador.atribuicaoVariavel(v); }
    )
    
    {AnalisadorSemantico.tabelaAtual.atribuirValor(v,valor,token.beginLine,token.beginColumn);}

}

void chamadaProcedimento() :
{Token t = null; String s = "";}
{
    
    ( 
        try{
           t = <IDENTIFICADOR>
           {s = t.image;}
           {AnalisadorSemantico.verificaProcedimentoFoiDeclarado(s,token.beginLine,token.beginColumn);}
           {AnalisadorSemantico.procedimentosUtilizados.add(s);}
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador de procedimento esperado", Grammar.descricao);
        }
        try{
            <PARENTESES_ABRE> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", Grammar.descricao);
        }
        listaExpressoes() 
        try{
            <PARENTESES_FECHA> 
        }
        catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", Grammar.descricao);
        }
    )

}

void comandoCondicional() throws ParseException:
{}
{
    (
        <IF>
        |
        {showMessageError(token.next.beginLine, token.next.beginColumn, "Palavra reservada IF esperada", Grammar.descricao);
        if (getToken(1).kind != BEGIN) {
            error_skipto_before(BEGIN, PONTO_VIRGULA);
        }
        throw generateParseException();}
    )
    
   
    expressao()
    
    {
        if (getToken(1).kind == PARENTESES_FECHA) {
            showMessageError(token.next.beginLine, token.next.beginColumn, "Fecha parenteses inesperado", Grammar.descricao);
            error_skipto_before(THEN, PONTO_VIRGULA, BEGIN);
        }
    }
    
    (
        <THEN>
        |
        {showMessageError(token.next.beginLine, token.next.beginColumn, "Palavra reservada THEN esperada", Grammar.descricao);
        if (getToken(1).kind != BEGIN) {
            error_skipto_before(BEGIN, PONTO_VIRGULA);
        }
        }
    ) 

    {Gerador.verificaIf(); }
    
    comando() 
    
    {Gerador.desvioIf(); }
    
    [ 
        LOOKAHEAD(1) <ELSE> 
        {Gerador.verificaElse(); }
        comando()
        {Gerador.desvioElse(); }
    ]

}

void comandoRepetitivo() throws ParseException:
{}
{
    try{
        <WHILE>    
        {Gerador.setExpressao(Gerador.getContador()); }
        expressao()
        {Gerador.verificaWhile(); }
    }
    catch(ParseException e){
        showMessageError(token.next.beginLine, token.next.beginColumn, "Palavra reservada WHILE esperada", Grammar.descricao);
        if (getToken(1).kind != DO) {
            error_skipto_before(DO, PONTO_VIRGULA, BEGIN, PONTO);
        }
    }
    

    
    
    try{
        <DO>
    }
    catch(ParseException e){
      
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Palavra reservada DO esperada", Grammar.descricao);
        if (getToken(1).kind != BEGIN) {
            error_skipto_before(IDENTIFICADOR, BEGIN, IF, WHILE, READ, WRITE);
        }
    }
        
    

    comando() 

    {Gerador.desvioWhile(); }
    
}


String expressao() :
{String simboloRelacao = ""; String valor; String s;}
{   

    {s = "";}
    {valor = "";}

    try{
        s = expressaoSimples() 
        {valor += s;}

        
    }
    catch(ParseException e){
        error_skipto_before(END,PONTO_VIRGULA,PONTO, THEN, DO);
    }
    
    [
        LOOKAHEAD(<SIMBOLO_IGUAL> | <SIMBOLO_DIFERENTE> | <SIMBOLO_MENOR> | <SIMBOLO_MENOR_IGUAL> | <SIMBOLO_MAIOR_IGUAL> | <SIMBOLO_MAIOR>)
        try{
            simboloRelacao = relacao()
            {valor += simboloRelacao;}
        }
        catch(ParseException e){ }
    

        try{
            s = expressaoSimples() 
            {valor += s;}
        
            {
                //pegar o primeiro elemento
            }
        }
        catch(ParseException e){
            error_skipto_before(END,PONTO_VIRGULA,PONTO, THEN, DO);
        }

        {
            //montar comparação
            Gerador.verificaRelacao(simboloRelacao);
        }
    ]

    {return valor;}

}

String expressaoSimples() :
{String valor; String s; Token t;}
{

    {valor = "";}
    {s = "";}
    {t = null;}

    [
  
        (
            t = <OP_ADICAO>
            |
            t = <OP_SUBTRACAO>
            {Gerador.inverterSinal(); }
        )
        {valor += t.image;}

    ]

    
    s = termo()
    {valor += s;}

    (
        //LOOKAHEAD(<OP_ADICAO> | <OP_SUBTRACAO> | <OP_OR>)
        LOOKAHEAD(<OP_ADICAO> | <OP_SUBTRACAO> | <OP_OR> | termo() relacao() | termo() <PONTO_VIRGULA>)
        (
            try{
                (
                
                    t = <OP_ADICAO>
                    |
                    t = <OP_SUBTRACAO> 
                    | 
                    t = <OP_OR>

                )
                {valor += t.image;}

            }catch(ParseException e){
        
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador lógico ou aritmético esperado", Grammar.descricao);
            } 
        ) 
        s = termo()
        {valor += s;}
        {Gerador.verificarOperador(t.image);}
        
    )*

    {return valor;}

}

String relacao() :
{String valor; String s; Token t;}
{
    
    {s = "";}
    {valor = "";}
    {t = null;}

    (
        try{
            (t = <SIMBOLO_IGUAL> | t = <SIMBOLO_DIFERENTE> | t = <SIMBOLO_MENOR> | t = <SIMBOLO_MENOR_IGUAL> | t = <SIMBOLO_MAIOR_IGUAL> | t = <SIMBOLO_MAIOR>)
            {valor += t.image;}
        }catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador lógico ou aritmético esperado", Grammar.descricao);
        } 
    )

    {return valor;}

}

String termo() :
{String valor; String s; Token t;}
{

    {valor = "";}
    {s = "";}
    {t = null;}

    try{
        s = fator()
        {valor += s;}
    }
    catch(ParseException e){
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Expressão condicional esperada", Grammar.descricao);
    }

    (
        (
            try{
                (t = <OP_MULTIPLICACAO> | t = <OP_DIVISAO> | t = <OP_AND>)
                {s = t.image;}
                {valor += s;}
            }catch(ParseException e){
        
                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador de multiplicação ou adição ou divisão esperado", Grammar.descricao);
            } 
        ) 
        try{
            s = fator()
            {valor += s;}
        }
        catch(ParseException e){
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Expressão condicional esperada", Grammar.descricao);
        }

        {Gerador.verificarOperador(t.image);}
    )*

    {return valor;}

}


String fator() :
{String valor = ""; String s = ""; Token t = null;}
{

    (
        s = variavel()
        {AnalisadorSemantico.tabelaAtual.verificarVariavelNulaUtilizada(s, token.beginLine, token.beginColumn);}
        {valor += s;}
        {
            Gerador.carregarValorDaVariavel(s);
        }
    | 
        try{ 
            (t = <NUMERO_INTEIRO> | t = <NUMERO_REAL>)

            {valor += t.image;}

            {
                Gerador.carregarValorConstante(Integer.parseInt(t.image));
            }
        }catch(ParseException e){

            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Número inteiro ou real esperado", Grammar.descricao);
        } 
    |
        (
            try{
                t = <PARENTESES_ABRE>
                {valor += t.image;}
            }catch(ParseException e){

                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Abre parenteses esperado", Grammar.descricao);
            }  
            s = expressao()
            {valor += s;}
            try{
                t = <PARENTESES_FECHA>
                {valor += t.image;}
            }catch(ParseException e){

                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Fecha parenteses esperado", Grammar.descricao);
            } 
        ) 
    | 
        (
            try{
               (t = <OP_NOT>)
               {valor += t.image;}
               {Gerador.verificarOperador(t.image);}
            }catch(ParseException e){

                showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Operador not esperado", Grammar.descricao);
            }
            s = fator()
            {valor += s;}
        )
    | 
        try{
            (t = <TRUE> | t = <FALSE>)
            {valor += t.image;}
        }catch(ParseException e){

            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Tipo de dado boleano(TRUE ou FALSE) esperado", Grammar.descricao);
        } 
    )
    {return valor;}

}

void listaExpressoes() :
{}
{
    expressao() 

    (
        try{
            <VIRGULA>
        }catch(ParseException e){
        
            showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Virgula esperada", Grammar.descricao);
        }  
        expressao()
    )*
}


String variavel() :
{Token a;}
{
    {a = null;}
    try{
        a = <IDENTIFICADOR>

    }catch(ParseException e){
        
        showMessageError(e.currentToken.next.beginLine, e.currentToken.next.beginColumn, "Identificador esperado", Grammar.descricao);
    } 

    {return a.image;}
}
