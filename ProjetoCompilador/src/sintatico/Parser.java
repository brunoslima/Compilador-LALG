
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 09 15:52:14 BRT 2017
//----------------------------------------------------

package sintatico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 09 15:52:14 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\004\005\000\002\004\003\000\002\005\006" +
    "\000\002\005\003\000\002\006\004\000\002\007\005\000" +
    "\002\007\002\000\002\010\005\000\002\010\003\000\002" +
    "\011\005\000\002\011\004\000\002\012\005\000\002\013" +
    "\004\000\002\015\005\000\002\015\002\000\002\014\006" +
    "\000\002\014\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\006\000\002\020\005\000\002" +
    "\020\002\000\002\021\003\000\002\021\003\000\002\021" +
    "\007\000\002\021\003\000\002\021\003\000\002\022\005" +
    "\000\002\023\006\000\002\024\007\000\002\025\003\000" +
    "\002\025\003\000\002\025\007\000\002\025\003\000\002" +
    "\025\003\000\002\026\004\000\002\026\003\000\002\026" +
    "\007\000\002\026\003\000\002\026\003\000\002\027\006" +
    "\000\002\030\003\000\002\030\003\000\002\030\007\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\033\005\000\002\033\005\000\002\033\004\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\002" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\035\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\002\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\005\000\002\037\004\000" +
    "\002\041\004\000\002\042\004\000\002\042\002\000\002" +
    "\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\006\005\001\002\000\004\002\233\001" +
    "\002\000\004\055\006\001\002\000\004\025\007\001\002" +
    "\000\014\007\017\011\013\013\010\014\015\015\012\001" +
    "\002\000\010\023\uffed\025\uffed\055\uffed\001\002\000\004" +
    "\024\232\001\002\000\010\023\uffec\025\uffec\055\uffec\001" +
    "\002\000\004\055\204\001\002\000\006\024\ufffd\025\ufffd" +
    "\001\002\000\010\023\uffeb\025\uffeb\055\uffeb\001\002\000" +
    "\004\055\171\001\002\000\012\007\031\026\026\031\022" +
    "\055\032\001\002\000\006\024\uffff\025\uffff\001\002\000" +
    "\006\024\ufff6\025\ufff6\001\002\000\020\042\046\043\042" +
    "\050\040\051\036\053\051\054\045\055\050\001\002\000" +
    "\006\010\uffe6\025\uffe6\001\002\000\006\010\uffe8\025\147" +
    "\001\002\000\006\010\uffe4\025\uffe4\001\002\000\020\042" +
    "\046\043\042\050\040\051\036\053\051\054\045\055\050" +
    "\001\002\000\004\041\115\001\002\000\006\010\uffe7\025" +
    "\uffe7\001\002\000\012\007\031\026\026\031\022\055\032" +
    "\001\002\000\006\041\uffb4\051\034\001\002\000\006\010" +
    "\uffe3\025\uffe3\001\002\000\020\042\046\043\042\050\040" +
    "\051\036\053\051\054\045\055\050\001\002\000\030\007" +
    "\uffcf\010\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\052\uffcf\055\uffcf\001\002\000\020\042" +
    "\046\043\042\050\040\051\036\053\051\054\045\055\050" +
    "\001\002\000\004\052\106\001\002\000\014\050\040\051" +
    "\036\053\051\054\045\055\050\001\002\000\044\007\uffbd" +
    "\010\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\042\uffbd\043\uffbd\044\076\045\074\046\073" +
    "\047\uffbd\052\uffbd\055\uffbd\001\002\000\014\050\040\051" +
    "\036\053\051\054\045\055\050\001\002\000\036\007\uffc8" +
    "\010\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\042\053\043\054\047\055\052\uffc8\055\uffc8" +
    "\001\002\000\006\023\066\052\uffb5\001\002\000\044\007" +
    "\uffba\010\uffba\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\052\uffba\055\uffba\001\002\000\014\050\040" +
    "\051\036\053\051\054\045\055\050\001\002\000\044\007" +
    "\uffbc\010\uffbc\023\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\052\uffbc\055\uffbc\001\002\000\046\007\uffb4" +
    "\010\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\052\uffb4\055\uffb4\001\002\000\044\007" +
    "\uffbb\010\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\052\uffbb\055\uffbb\001\002\000\036\007\uffc8" +
    "\010\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\042\053\043\054\047\055\052\uffc8\055\uffc8" +
    "\001\002\000\014\050\040\051\036\053\051\054\045\055" +
    "\050\001\002\000\014\050\040\051\036\053\051\054\045" +
    "\055\050\001\002\000\014\050\040\051\036\053\051\054" +
    "\045\055\050\001\002\000\030\007\uffce\010\uffce\023\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\052" +
    "\uffce\055\uffce\001\002\000\036\007\uffc8\010\uffc8\023\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\042" +
    "\053\043\054\047\055\052\uffc8\055\uffc8\001\002\000\030" +
    "\007\uffc9\010\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\052\uffc9\055\uffc9\001\002\000\036" +
    "\007\uffc8\010\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\042\053\043\054\047\055\052\uffc8" +
    "\055\uffc8\001\002\000\030\007\uffca\010\uffca\023\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\052\uffca" +
    "\055\uffca\001\002\000\036\007\uffc8\010\uffc8\023\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\042\053" +
    "\043\054\047\055\052\uffc8\055\uffc8\001\002\000\030\007" +
    "\uffcb\010\uffcb\023\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\052\uffcb\055\uffcb\001\002\000\004\052" +
    "\uffb7\001\002\000\020\042\046\043\042\050\040\051\036" +
    "\053\051\054\045\055\050\001\002\000\004\052\uffb6\001" +
    "\002\000\030\007\uffcc\010\uffcc\023\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\052\uffcc\055\uffcc\001" +
    "\002\000\036\007\uffc8\010\uffc8\023\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\042\053\043\054\047" +
    "\055\052\uffc8\055\uffc8\001\002\000\030\007\uffcd\010\uffcd" +
    "\023\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\052\uffcd\055\uffcd\001\002\000\014\050\040\051\036" +
    "\053\051\054\045\055\050\001\002\000\014\050\040\051" +
    "\036\053\051\054\045\055\050\001\002\000\036\007\uffc1" +
    "\010\uffc1\023\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\042\uffc1\043\uffc1\047\uffc1\052\uffc1\055\uffc1" +
    "\001\002\000\014\050\040\051\036\053\051\054\045\055" +
    "\050\001\002\000\044\007\uffbd\010\uffbd\023\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\042\uffbd\043" +
    "\uffbd\044\076\045\074\046\073\047\uffbd\052\uffbd\055\uffbd" +
    "\001\002\000\036\007\uffbf\010\uffbf\023\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\042\uffbf\043\uffbf" +
    "\047\uffbf\052\uffbf\055\uffbf\001\002\000\044\007\uffbd\010" +
    "\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\042\uffbd\043\uffbd\044\076\045\074\046\073\047" +
    "\uffbd\052\uffbd\055\uffbd\001\002\000\036\007\uffc0\010\uffc0" +
    "\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\042\uffc0\043\uffc0\047\uffc0\052\uffc0\055\uffc0\001\002" +
    "\000\044\007\uffbd\010\uffbd\023\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\042\uffbd\043\uffbd\044\076" +
    "\045\074\046\073\047\uffbd\052\uffbd\055\uffbd\001\002\000" +
    "\036\007\uffbe\010\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\042\uffbe\043\uffbe\047\uffbe\052" +
    "\uffbe\055\uffbe\001\002\000\044\007\uffb8\010\uffb8\023\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\052\uffb8" +
    "\055\uffb8\001\002\000\020\007\uffe1\010\uffe1\025\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\055\uffe1\001\002\000\004\052\110" +
    "\001\002\000\044\007\uffb9\010\uffb9\023\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\052\uffb9\055\uffb9\001" +
    "\002\000\004\025\112\001\002\000\012\007\031\026\026" +
    "\031\022\055\032\001\002\000\004\010\114\001\002\000" +
    "\006\010\uffe5\025\uffe5\001\002\000\020\042\046\043\042" +
    "\050\040\051\036\053\051\054\045\055\050\001\002\000" +
    "\020\007\uffe2\010\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2" +
    "\055\uffe2\001\002\000\004\027\120\001\002\000\012\007" +
    "\125\026\026\031\022\055\032\001\002\000\014\007\137" +
    "\026\026\030\136\031\022\055\140\001\002\000\014\007" +
    "\uffde\026\uffde\030\uffde\031\uffde\055\uffde\001\002\000\014" +
    "\007\uffdc\026\uffdc\030\uffdc\031\uffdc\055\uffdc\001\002\000" +
    "\014\007\uffdf\026\uffdf\030\uffdf\031\uffdf\055\uffdf\001\002" +
    "\000\012\007\031\026\026\031\022\055\032\001\002\000" +
    "\014\007\uffdb\026\uffdb\030\uffdb\031\uffdb\055\uffdb\001\002" +
    "\000\004\025\130\001\002\000\012\007\031\026\026\031" +
    "\022\055\032\001\002\000\004\010\132\001\002\000\014" +
    "\007\uffdd\026\uffdd\030\uffdd\031\uffdd\055\uffdd\001\002\000" +
    "\020\007\uffd9\010\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9" +
    "\055\uffd9\001\002\000\020\007\uffe0\010\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\031\uffe0\055\uffe0\001\002\000\020\007\uffd7" +
    "\010\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\055\uffd7\001" +
    "\002\000\004\055\050\001\002\000\012\007\031\026\026" +
    "\031\022\055\032\001\002\000\004\051\034\001\002\000" +
    "\020\007\uffd6\010\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6" +
    "\055\uffd6\001\002\000\004\025\143\001\002\000\012\007" +
    "\031\026\026\031\022\055\032\001\002\000\004\010\145" +
    "\001\002\000\020\007\uffd8\010\uffd8\025\uffd8\026\uffd8\030" +
    "\uffd8\031\uffd8\055\uffd8\001\002\000\020\007\uffda\010\uffda" +
    "\025\uffda\026\uffda\030\uffda\031\uffda\055\uffda\001\002\000" +
    "\012\007\031\026\026\031\022\055\032\001\002\000\004" +
    "\010\151\001\002\000\006\024\uffea\025\uffea\001\002\000" +
    "\006\010\uffe8\025\147\001\002\000\004\010\uffe9\001\002" +
    "\000\004\032\155\001\002\000\012\007\162\026\026\031" +
    "\022\055\032\001\002\000\020\007\uffd3\010\uffd3\025\uffd3" +
    "\026\uffd3\030\uffd3\031\uffd3\055\uffd3\001\002\000\020\007" +
    "\uffd1\010\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\055\uffd1" +
    "\001\002\000\020\007\uffd4\010\uffd4\025\uffd4\026\uffd4\030" +
    "\uffd4\031\uffd4\055\uffd4\001\002\000\020\007\uffd5\010\uffd5" +
    "\025\uffd5\026\uffd5\030\uffd5\031\uffd5\055\uffd5\001\002\000" +
    "\012\007\031\026\026\031\022\055\032\001\002\000\020" +
    "\007\uffd0\010\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\055" +
    "\uffd0\001\002\000\004\025\165\001\002\000\012\007\031" +
    "\026\026\031\022\055\032\001\002\000\004\010\167\001" +
    "\002\000\020\007\uffd2\010\uffd2\025\uffd2\026\uffd2\030\uffd2" +
    "\031\uffd2\055\uffd2\001\002\000\010\007\017\011\013\025" +
    "\176\001\002\000\014\007\ufff8\011\ufff8\022\ufff8\023\173" +
    "\025\ufff8\001\002\000\012\007\ufffa\011\ufffa\022\ufffa\025" +
    "\ufffa\001\002\000\004\055\174\001\002\000\014\007\ufff8" +
    "\011\ufff8\022\ufff8\023\173\025\ufff8\001\002\000\012\007" +
    "\ufff9\011\ufff9\022\ufff9\025\ufff9\001\002\000\010\013\010" +
    "\014\015\015\012\001\002\000\006\024\ufffb\025\ufffb\001" +
    "\002\000\006\024\ufffe\025\ufffe\001\002\000\004\055\171" +
    "\001\002\000\010\007\017\011\013\025\176\001\002\000" +
    "\006\024\ufffc\025\ufffc\001\002\000\010\012\205\025\206" +
    "\055\171\001\002\000\004\055\171\001\002\000\014\007" +
    "\017\011\013\013\010\014\015\015\012\001\002\000\004" +
    "\022\224\001\002\000\006\024\ufff7\025\ufff7\001\002\000" +
    "\004\025\217\001\002\000\006\023\214\025\ufff0\001\002" +
    "\000\004\025\ufff2\001\002\000\006\012\205\055\171\001" +
    "\002\000\006\023\214\025\ufff0\001\002\000\004\025\ufff1" +
    "\001\002\000\014\007\017\011\013\013\010\014\015\015" +
    "\012\001\002\000\004\025\222\001\002\000\006\024\ufff5" +
    "\025\ufff5\001\002\000\006\007\017\011\013\001\002\000" +
    "\006\024\ufff3\025\ufff3\001\002\000\010\013\010\014\015" +
    "\015\012\001\002\000\006\023\uffee\025\uffee\001\002\000" +
    "\006\024\ufff4\025\ufff4\001\002\000\004\022\230\001\002" +
    "\000\010\013\010\014\015\015\012\001\002\000\006\023" +
    "\uffef\025\uffef\001\002\000\004\002\000\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\010\004\017" +
    "\010\013\016\015\017\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\167\001\001\000" +
    "\016\021\023\022\027\023\022\024\024\027\032\040\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\153\033\034\035\042\037\040\040\046\001\001\000\002" +
    "\001\001\000\004\020\147\001\001\000\002\001\001\000" +
    "\014\031\116\033\034\035\042\037\040\040\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\110\022" +
    "\027\023\022\024\024\027\032\040\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\031\043\033\034\035" +
    "\042\037\040\040\046\041\036\001\001\000\002\001\001" +
    "\000\014\031\106\033\034\035\042\037\040\040\046\001" +
    "\001\000\002\001\001\000\006\037\104\040\046\001\001" +
    "\000\004\036\074\001\001\000\010\035\070\037\040\040" +
    "\046\001\001\000\004\034\067\001\001\000\004\042\064" +
    "\001\001\000\002\001\001\000\010\035\051\037\040\040" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\055\001\001\000\010\035\062\037" +
    "\040\040\046\001\001\000\010\035\060\037\040\040\046" +
    "\001\001\000\010\035\056\037\040\040\046\001\001\000" +
    "\002\001\001\000\004\034\057\001\001\000\002\001\001" +
    "\000\004\034\061\001\001\000\002\001\001\000\004\034" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\031\066\033\034\035\042\037\040\040\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\071\001\001" +
    "\000\002\001\001\000\006\037\102\040\046\001\001\000" +
    "\006\037\100\040\046\001\001\000\002\001\001\000\006" +
    "\037\076\040\046\001\001\000\004\036\077\001\001\000" +
    "\002\001\001\000\004\036\101\001\001\000\002\001\001" +
    "\000\004\036\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\112\022\027\023\022\024" +
    "\024\027\032\040\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\031\115\033\034\035\042\037\040\040" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\123\023\121\024\122\025\120\027\125\040\026\001" +
    "\001\000\012\023\132\024\134\026\133\027\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\126\022\027\023\022\024\024\027\032\040\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\021" +
    "\130\022\027\023\022\024\024\027\032\040\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\145\040\026" +
    "\001\001\000\016\021\141\022\027\023\022\024\024\027" +
    "\032\040\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\143\022\027\023\022\024" +
    "\024\027\032\040\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\021\151\022\027\023" +
    "\022\024\024\027\032\040\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\157\023\155\024\156" +
    "\027\162\030\160\040\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\163\022\027\023\022\024\024\027\032\040\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\021\165" +
    "\022\027\023\022\024\024\027\032\040\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\177\010\176" +
    "\017\020\001\001\000\004\007\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\174\001\001\000\002" +
    "\001\001\000\004\016\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\201\001\001\000\010\005\202" +
    "\010\176\017\020\001\001\000\002\001\001\000\012\006" +
    "\206\011\207\013\210\014\211\001\001\000\004\006\226" +
    "\001\001\000\016\003\217\004\017\010\013\012\225\016" +
    "\015\017\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\212\001\001\000\002\001" +
    "\001\000\006\006\206\014\214\001\001\000\004\015\215" +
    "\001\001\000\002\001\001\000\016\003\217\004\017\010" +
    "\013\012\220\016\015\017\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\222\017\020\001\001\000" +
    "\002\001\001\000\004\016\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 scanner.init();              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }



    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message + info);
        System.exit(0);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variavel ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lista_expressoes2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lista_expressoes2 ::= VIRGULA expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_expressoes ::= expressao lista_expressoes2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fator ::= OP_NOT fator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fator ::= PARENTESES_ABRE expressao PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fator ::= NUMERO_REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fator ::= NUMERO_INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fator ::= variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termo2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termo2 ::= OP_AND fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termo2 ::= OP_DIVISAO fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termo2 ::= OP_MULTIPLICACAO fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termo ::= fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relacao ::= SIMBOLO_MAIOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relacao ::= SIMBOLO_MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relacao ::= SIMBOLO_MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relacao ::= SIMBOLO_MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relacao ::= SIMBOLO_DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacao ::= SIMBOLO_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressao_simples2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressao_simples2 ::= OP_OR termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressao_simples2 ::= OP_SUBTRACAO termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao_simples2 ::= OP_ADICAO termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao_simples ::= termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao_simples ::= OP_SUBTRACAO termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao_simples ::= OP_ADICAO termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comando_repetitivo2 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comando_repetitivo2 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comando_repetitivo2 ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comando_repetitivo2 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comando_repetitivo2 ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comando_repetitivo ::= WHILE expressao DO comando_repetitivo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comando_condicional2 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comando_condicional2 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comando_condicional2 ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comando_condicional2 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comando_condicional2 ::= ELSE atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando_condicional12 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comando_condicional12 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comando_condicional12 ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comando_condicional12 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comando_condicional12 ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comando_condicional1 ::= IF expressao THEN comando_condicional12 comando_condicional2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // chamada_procedimento ::= IDENTIFICADOR PARENTESES_ABRE lista_expressoes PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atribuicao ::= variavel OP_ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando_composto2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando_composto2 ::= PONTO_VIRGULA comando comando_composto2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando_composto ::= BEGIN comando comando_composto2 END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // secao_parametros_formais ::= lista_identificadores DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // secao_parametros_formais ::= VAR lista_identificadores DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // secao_parametros_formais2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // secao_parametros_formais2 ::= VIRGULA secao_parametros_formais secao_parametros_formais2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_formais ::= secao_parametros_formais secao_parametros_formais2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_formais",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracao_procedimentos1 ::= bloco PONTO_VIRGULA parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracao_procedimentos ::= PONTO_VIRGULA declaracao_procedimentos1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracao_procedimentos ::= parametros_formais PONTO_VIRGULA declaracao_procedimentos1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parte_declaracao_sub_rotinas ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_sub_rotinas",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parte_declaracao_sub_rotinas ::= PROCEDURE IDENTIFICADOR declaracao_procedimentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_sub_rotinas",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_identificadores2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_identificadores2 ::= VIRGULA IDENTIFICADOR lista_identificadores2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_identificadores ::= IDENTIFICADOR lista_identificadores2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parte_declaracao_variaveis2 ::= parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parte_declaracao_variaveis2 ::= PONTO_VIRGULA tipo lista_identificadores parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parte_declaracao_variaveis ::= parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parte_declaracao_variaveis ::= tipo lista_identificadores parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloco ::= parte_declaracao_variaveis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PROGRAM IDENTIFICADOR PONTO_VIRGULA bloco PONTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

