
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 05 23:16:00 BRT 2017
//----------------------------------------------------

package sintatico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 05 23:16:00 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\004\004\000\002\005\005\000\002\005\002" +
    "\000\002\006\004\000\002\007\004\000\002\010\005\000" +
    "\002\010\002\000\002\011\004\000\002\011\002\000\002" +
    "\012\005\000\002\014\005\000\002\014\004\000\002\013" +
    "\005\000\002\015\004\000\002\017\005\000\002\017\002" +
    "\000\002\016\006\000\002\016\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\006\000\002" +
    "\022\005\000\002\022\002\000\002\023\003\000\002\023" +
    "\003\000\002\023\007\000\002\023\003\000\002\023\003" +
    "\000\002\024\005\000\002\025\006\000\002\026\007\000" +
    "\002\027\003\000\002\027\003\000\002\027\007\000\002" +
    "\027\003\000\002\027\003\000\002\030\004\000\002\030" +
    "\003\000\002\030\007\000\002\030\003\000\002\030\003" +
    "\000\002\031\006\000\002\032\003\000\002\032\003\000" +
    "\002\032\007\000\002\032\003\000\002\032\003\000\002" +
    "\033\004\000\002\034\005\000\002\034\002\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\006\000" +
    "\002\037\003\000\002\037\002\000\002\040\003\000\002" +
    "\040\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\004\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\004\000\002\044\002\000\002\046\004\000" +
    "\002\047\003\000\002\047\002\000\002\050\004\000\002" +
    "\051\004\000\002\051\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\006\005\001\002\000\004\002\224\001" +
    "\002\000\004\055\006\001\002\000\004\025\007\001\002" +
    "\000\010\013\016\014\012\015\015\001\002\000\006\007" +
    "\ufff6\011\032\001\002\000\004\055\025\001\002\000\010" +
    "\023\uffea\025\uffea\055\uffea\001\002\000\004\024\023\001" +
    "\002\000\010\007\ufffc\011\ufffc\025\017\001\002\000\010" +
    "\023\uffeb\025\uffeb\055\uffeb\001\002\000\010\023\uffec\025" +
    "\uffec\055\uffec\001\002\000\010\013\016\014\012\015\015" +
    "\001\002\000\006\007\ufffe\011\ufffe\001\002\000\010\007" +
    "\ufffc\011\ufffc\025\017\001\002\000\006\007\ufffd\011\ufffd" +
    "\001\002\000\004\002\000\001\002\000\010\007\ufffb\011" +
    "\ufffb\025\ufffb\001\002\000\014\007\ufff8\011\ufff8\022\ufff8" +
    "\023\027\025\ufff8\001\002\000\012\007\ufffa\011\ufffa\022" +
    "\ufffa\025\ufffa\001\002\000\004\055\030\001\002\000\014" +
    "\007\ufff8\011\ufff8\022\ufff8\023\027\025\ufff8\001\002\000" +
    "\012\007\ufff9\011\ufff9\022\ufff9\025\ufff9\001\002\000\004" +
    "\055\176\001\002\000\004\025\175\001\002\000\004\007" +
    "\036\001\002\000\004\024\uffff\001\002\000\012\007\045" +
    "\026\043\031\037\055\047\001\002\000\006\042\052\043" +
    "\053\001\002\000\006\010\uffe5\025\uffe5\001\002\000\006" +
    "\010\uffe7\025\154\001\002\000\006\010\uffe3\025\uffe3\001" +
    "\002\000\006\042\052\043\053\001\002\000\004\041\121" +
    "\001\002\000\012\007\045\026\043\031\037\055\047\001" +
    "\002\000\006\010\uffe6\025\uffe6\001\002\000\012\041\uffb6" +
    "\042\052\043\053\051\055\001\002\000\006\010\uffe2\025" +
    "\uffe2\001\002\000\004\041\uffb8\001\002\000\002\001\002" +
    "\000\002\001\002\000\002\001\002\000\006\042\052\043" +
    "\053\001\002\000\004\041\uffb7\001\002\000\046\007\uffcc" +
    "\010\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\104\034\102\035\077\036\101\037\075" +
    "\040\103\041\uffcc\052\uffcc\055\uffcc\001\002\000\002\001" +
    "\002\000\062\007\uffb9\010\uffb9\023\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\073\045\070\046\067\047\uffb9\052\uffb9\055\uffb9\001" +
    "\002\000\010\042\052\043\053\047\063\001\002\000\002" +
    "\001\002\000\002\001\002\000\002\001\002\000\046\007" +
    "\uffc5\010\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\052\uffc5\055\uffc5\001\002\000\002" +
    "\001\002\000\002\001\002\000\054\007\uffbe\010\uffbe\023" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\047\uffbe\052\uffbe\055\uffbe\001\002" +
    "\000\002\001\002\000\002\001\002\000\054\007\uffba\010" +
    "\uffba\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\047\uffba\052\uffba\055\uffba" +
    "\001\002\000\006\042\uffc6\043\uffc6\001\002\000\006\042" +
    "\052\043\053\001\002\000\006\042\uffc9\043\uffc9\001\002" +
    "\000\032\007\uffce\010\uffce\023\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\041\uffce\052\uffce\055\uffce" +
    "\001\002\000\006\042\uffc8\043\uffc8\001\002\000\006\042" +
    "\uffca\043\uffca\001\002\000\006\042\uffc7\043\uffc7\001\002" +
    "\000\006\042\uffcb\043\uffcb\001\002\000\046\007\uffcc\010" +
    "\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\104\034\102\035\077\036\101\037\075\040" +
    "\103\041\uffcc\052\uffcc\055\uffcc\001\002\000\032\007\uffcd" +
    "\010\uffcd\023\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\041\uffcd\052\uffcd\055\uffcd\001\002\000\004" +
    "\052\114\001\002\000\006\023\112\052\uffb3\001\002\000" +
    "\004\052\uffb5\001\002\000\006\042\052\043\053\001\002" +
    "\000\004\052\uffb4\001\002\000\020\007\uffe0\010\uffe0\025" +
    "\uffe0\026\uffe0\030\uffe0\031\uffe0\055\uffe0\001\002\000\004" +
    "\025\116\001\002\000\012\007\045\026\043\031\037\055" +
    "\047\001\002\000\004\010\120\001\002\000\006\010\uffe4" +
    "\025\uffe4\001\002\000\006\042\052\043\053\001\002\000" +
    "\020\007\uffe1\010\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1" +
    "\055\uffe1\001\002\000\004\027\124\001\002\000\012\007" +
    "\131\026\043\031\037\055\047\001\002\000\014\007\143" +
    "\026\043\030\142\031\037\055\144\001\002\000\014\007" +
    "\uffdd\026\uffdd\030\uffdd\031\uffdd\055\uffdd\001\002\000\014" +
    "\007\uffdb\026\uffdb\030\uffdb\031\uffdb\055\uffdb\001\002\000" +
    "\014\007\uffde\026\uffde\030\uffde\031\uffde\055\uffde\001\002" +
    "\000\012\007\045\026\043\031\037\055\047\001\002\000" +
    "\014\007\uffda\026\uffda\030\uffda\031\uffda\055\uffda\001\002" +
    "\000\004\025\134\001\002\000\012\007\045\026\043\031" +
    "\037\055\047\001\002\000\004\010\136\001\002\000\014" +
    "\007\uffdc\026\uffdc\030\uffdc\031\uffdc\055\uffdc\001\002\000" +
    "\020\007\uffd8\010\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8" +
    "\055\uffd8\001\002\000\020\007\uffdf\010\uffdf\025\uffdf\026" +
    "\uffdf\030\uffdf\031\uffdf\055\uffdf\001\002\000\020\007\uffd6" +
    "\010\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6\055\uffd6\001" +
    "\002\000\004\055\152\001\002\000\012\007\045\026\043" +
    "\031\037\055\047\001\002\000\004\051\055\001\002\000" +
    "\020\007\uffd5\010\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5" +
    "\055\uffd5\001\002\000\004\025\147\001\002\000\012\007" +
    "\045\026\043\031\037\055\047\001\002\000\004\010\151" +
    "\001\002\000\020\007\uffd7\010\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\031\uffd7\055\uffd7\001\002\000\010\041\uffb6\042\052" +
    "\043\053\001\002\000\020\007\uffd9\010\uffd9\025\uffd9\026" +
    "\uffd9\030\uffd9\031\uffd9\055\uffd9\001\002\000\012\007\045" +
    "\026\043\031\037\055\047\001\002\000\004\010\156\001" +
    "\002\000\006\024\uffe9\025\uffe9\001\002\000\006\010\uffe7" +
    "\025\154\001\002\000\004\010\uffe8\001\002\000\004\032" +
    "\162\001\002\000\012\007\167\026\043\031\037\055\047" +
    "\001\002\000\020\007\uffd2\010\uffd2\025\uffd2\026\uffd2\030" +
    "\uffd2\031\uffd2\055\uffd2\001\002\000\020\007\uffd0\010\uffd0" +
    "\025\uffd0\026\uffd0\030\uffd0\031\uffd0\055\uffd0\001\002\000" +
    "\020\007\uffd3\010\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3" +
    "\055\uffd3\001\002\000\020\007\uffd4\010\uffd4\025\uffd4\026" +
    "\uffd4\030\uffd4\031\uffd4\055\uffd4\001\002\000\012\007\045" +
    "\026\043\031\037\055\047\001\002\000\020\007\uffcf\010" +
    "\uffcf\025\uffcf\026\uffcf\030\uffcf\031\uffcf\055\uffcf\001\002" +
    "\000\004\025\172\001\002\000\012\007\045\026\043\031" +
    "\037\055\047\001\002\000\004\010\174\001\002\000\020" +
    "\007\uffd1\010\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\055" +
    "\uffd1\001\002\000\004\007\ufff7\001\002\000\010\012\177" +
    "\025\200\055\025\001\002\000\004\055\025\001\002\000" +
    "\010\013\016\014\012\015\015\001\002\000\004\022\216" +
    "\001\002\000\004\025\ufff5\001\002\000\004\025\211\001" +
    "\002\000\006\023\206\025\uffef\001\002\000\004\025\ufff1" +
    "\001\002\000\006\012\177\055\025\001\002\000\006\023" +
    "\206\025\uffef\001\002\000\004\025\ufff0\001\002\000\010" +
    "\013\016\014\012\015\015\001\002\000\006\007\ufff6\011" +
    "\032\001\002\000\004\025\ufff4\001\002\000\004\007\036" +
    "\001\002\000\004\025\ufff2\001\002\000\010\013\016\014" +
    "\012\015\015\001\002\000\006\023\uffed\025\uffed\001\002" +
    "\000\004\025\ufff3\001\002\000\004\022\222\001\002\000" +
    "\010\013\016\014\012\015\015\001\002\000\006\023\uffee" +
    "\025\uffee\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\012\004\007" +
    "\006\013\020\010\001\001\000\006\011\033\012\032\001" +
    "\001\000\004\007\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\020\020\010\001\001\000\002" +
    "\001\001\000\004\005\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\034\001\001\000\002\001\001\000\016\023" +
    "\040\024\045\025\037\026\041\031\047\046\043\001\001" +
    "\000\012\033\160\036\056\037\057\041\053\001\001\000" +
    "\002\001\001\000\004\022\154\001\001\000\002\001\001" +
    "\000\012\033\122\036\056\037\057\041\053\001\001\000" +
    "\002\001\001\000\016\023\114\024\045\025\037\026\041" +
    "\031\047\046\043\001\001\000\002\001\001\000\014\033" +
    "\055\036\056\037\057\041\053\047\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\033\107\036\056\037\057" +
    "\041\053\050\106\001\001\000\002\001\001\000\006\034" +
    "\077\035\075\001\001\000\006\042\061\045\060\001\001" +
    "\000\006\043\071\044\070\001\001\000\006\040\064\041" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\065\045\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\036\104\037\057\041\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\105" +
    "\035\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\110\001\001\000\002\001\001\000\012\033\112" +
    "\036\056\037\057\041\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\023\116\024\045" +
    "\025\037\026\041\031\047\046\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\033\121\036\056\037\057" +
    "\041\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\024\127\025\125\026\126\027\124\031\131\046\043" +
    "\001\001\000\012\025\136\026\140\030\137\031\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\132\024\045\025\037\026\041\031\047\046" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\134\024\045\025\037\026\041\031\047\046\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\152\046" +
    "\043\001\001\000\016\023\145\024\045\025\037\026\041" +
    "\031\047\046\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\023\147\024\045\025\037" +
    "\026\041\031\047\046\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\033\055\036\056\037\057\041\053" +
    "\047\050\001\001\000\002\001\001\000\016\023\156\024" +
    "\045\025\037\026\041\031\047\046\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\164\025\162" +
    "\026\163\031\167\032\165\046\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\170\024\045\025\037\026\041\031\047\046" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\172\024\045\025\037\026\041\031\047\046\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\200\014\201\015\202\016\203\001\001\000" +
    "\004\007\220\001\001\000\012\004\211\006\013\013\217" +
    "\020\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\204\001\001\000\002\001\001" +
    "\000\006\007\200\016\206\001\001\000\004\017\207\001" +
    "\001\000\002\001\001\000\012\004\211\006\013\013\212" +
    "\020\010\001\001\000\006\011\213\012\032\001\001\000" +
    "\002\001\001\000\004\021\214\001\001\000\002\001\001" +
    "\000\004\020\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\222\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_expressoes2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lista_expressoes2 ::= VIRGULA expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes2",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lista_expressoes ::= expressao lista_expressoes2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variavel2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variavel2 ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variavel ::= IDENTIFICADOR variavel2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // termo3 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // termo3 ::= termo2 fator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // termo2 ::= OP_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termo2 ::= OP_DIVISAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termo2 ::= OP_MULTIPLICACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termo ::= fator termo3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expressao_simples4 ::= OP_SUBTRACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples4",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expressao_simples4 ::= OP_ADICAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples4",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expressao_simples3 ::= OP_OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples3",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expressao_simples3 ::= expressao_simples4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples3",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressao_simples2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expressao_simples2 ::= expressao_simples4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expressao_simples ::= expressao_simples2 termo expressao_simples3 termo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relacao ::= SIMBOLO_MAIOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacao ::= SIMBOLO_MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relacao ::= SIMBOLO_MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relacao ::= SIMBOLO_MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relacao ::= SIMBOLO_DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relacao ::= SIMBOLO_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao2 ::= relacao expressao_simples expressao2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= expressao_simples expressao2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comando_repetitivo2 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comando_repetitivo2 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comando_repetitivo2 ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comando_repetitivo2 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comando_repetitivo2 ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comando_repetitivo ::= WHILE expressao DO comando_repetitivo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comando_condicional2 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comando_condicional2 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comando_condicional2 ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comando_condicional2 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comando_condicional2 ::= ELSE atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comando_condicional12 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando_condicional12 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comando_condicional12 ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comando_condicional12 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comando_condicional12 ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comando_condicional1 ::= IF expressao THEN comando_condicional12 comando_condicional2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional1",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // chamada_procedimento ::= IDENTIFICADOR PARENTESES_ABRE lista_expressoes PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atribuicao ::= variavel OP_ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comando ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando_composto2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando_composto2 ::= PONTO_VIRGULA comando comando_composto2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando_composto ::= BEGIN comando comando_composto2 END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // secao_parametros_formais ::= lista_identificadores DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // secao_parametros_formais ::= VAR lista_identificadores DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // secao_parametros_formais2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // secao_parametros_formais2 ::= VIRGULA secao_parametros_formais secao_parametros_formais2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_formais ::= secao_parametros_formais secao_parametros_formais2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_formais",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracao_procedimentos3 ::= parte_declaracao_variaveis parte_declaracao_sub_rotinas comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracao_procedimentos2 ::= PONTO_VIRGULA declaracao_procedimentos3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracao_procedimentos2 ::= parametros_formais PONTO_VIRGULA declaracao_procedimentos3 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracao_procedimentos ::= PROCEDURE IDENTIFICADOR declaracao_procedimentos2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parte_declaracao_sub_rotinas ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_sub_rotinas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parte_declaracao_sub_rotinas ::= declaracao_procedimentos PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_sub_rotinas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_identificadores2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_identificadores2 ::= VIRGULA IDENTIFICADOR lista_identificadores2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_identificadores ::= IDENTIFICADOR lista_identificadores2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracao_variaveis ::= tipo lista_identificadores 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_variaveis",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parte_declaracao_variaveis2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parte_declaracao_variaveis2 ::= PONTO_VIRGULA declaracao_variaveis parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parte_declaracao_variaveis ::= declaracao_variaveis parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloco ::= parte_declaracao_variaveis parte_declaracao_sub_rotinas comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PROGRAM IDENTIFICADOR PONTO_VIRGULA bloco PONTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

