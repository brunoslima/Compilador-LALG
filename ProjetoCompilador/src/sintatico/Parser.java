
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 17 17:23:51 BRST 2017
//----------------------------------------------------

package sintatico;

import java_cup.runtime.Symbol;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 17 17:23:51 BRST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\006\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\006\004\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\010\000\002\011\005\000\002\011\003\000\002\012\004" +
    "\000\002\012\003\000\002\013\004\000\002\015\005\000" +
    "\002\015\003\000\002\014\006\000\002\014\005\000\002" +
    "\014\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\006\000\002\020\005" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\006\000\002\021\006\000\002\022\005\000\002\022" +
    "\003\000\002\023\006\000\002\024\007\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\006\000\002\025\006\000\002" +
    "\026\004\000\002\026\003\000\002\027\006\000\002\030" +
    "\003\000\002\030\003\000\002\030\007\000\002\030\003" +
    "\000\002\030\003\000\002\031\003\000\002\033\006\000" +
    "\002\033\006\000\002\033\005\000\002\033\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\006\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\003\000" +
    "\002\035\004\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\005\000\002\037\004" +
    "\000\002\037\003\000\002\037\003\000\002\041\004\000" +
    "\002\042\004\000\002\042\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\006\003\005\006\006\001\002\000\004\002" +
    "\300\001\002\000\004\002\uffff\001\002\000\004\055\007" +
    "\001\002\000\004\025\010\001\002\000\016\003\016\007" +
    "\022\011\014\013\011\014\017\015\013\001\002\000\010" +
    "\003\uffe7\025\uffe7\055\uffe7\001\002\000\004\024\277\001" +
    "\002\000\010\003\uffe6\025\uffe6\055\uffe6\001\002\000\004" +
    "\055\242\001\002\000\010\007\ufffc\024\ufffc\025\ufffc\001" +
    "\002\000\010\003\uffe4\025\uffe4\055\uffe4\001\002\000\010" +
    "\003\uffe5\025\uffe5\055\uffe5\001\002\000\004\055\060\001" +
    "\002\000\010\007\ufffe\024\ufffe\025\ufffe\001\002\000\020" +
    "\003\032\007\022\020\024\021\033\026\031\031\025\055" +
    "\036\001\002\000\010\007\ufff3\024\ufff3\025\ufff3\001\002" +
    "\000\004\051\225\001\002\000\026\003\055\016\045\017" +
    "\052\042\056\043\050\050\046\051\043\053\061\054\054" +
    "\055\060\001\002\000\010\003\uffdf\010\uffdf\025\uffdf\001" +
    "\002\000\006\003\204\025\203\001\002\000\010\003\uffdd" +
    "\010\uffdd\025\uffdd\001\002\000\026\003\055\016\045\017" +
    "\052\042\056\043\050\050\046\051\043\053\061\054\054" +
    "\055\060\001\002\000\012\003\uffd8\010\uffd8\025\uffd8\030" +
    "\uffd8\001\002\000\004\051\146\001\002\000\004\041\144" +
    "\001\002\000\010\003\uffe0\010\uffe0\025\uffe0\001\002\000" +
    "\006\041\uffa8\051\041\001\002\000\010\003\uffdc\010\uffdc" +
    "\025\uffdc\001\002\000\010\003\uffde\010\uffde\025\uffde\001" +
    "\002\000\026\003\055\016\045\017\052\042\056\043\050" +
    "\050\046\051\043\053\061\054\054\055\060\001\002\000" +
    "\022\003\uffc6\010\uffc6\023\uffc6\025\uffc6\027\uffc6\030\uffc6" +
    "\032\uffc6\052\uffc6\001\002\000\026\003\055\016\045\017" +
    "\052\042\056\043\050\050\046\051\043\053\061\054\054" +
    "\055\060\001\002\000\004\052\141\001\002\000\012\003" +
    "\uffad\044\uffad\045\uffad\046\uffad\001\002\000\020\016\045" +
    "\017\052\050\046\051\043\053\061\054\054\055\060\001" +
    "\002\000\012\003\127\044\131\045\126\046\125\001\002" +
    "\000\020\016\045\017\052\050\046\051\043\053\061\054" +
    "\054\055\060\001\002\000\010\042\063\043\064\047\065" +
    "\001\002\000\012\003\uffac\044\uffac\045\uffac\046\uffac\001" +
    "\002\000\006\003\114\023\116\001\002\000\012\003\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\001\002\000\022\003\uffc2\010" +
    "\uffc2\023\uffc2\025\uffc2\027\uffc2\030\uffc2\032\uffc2\052\uffc2" +
    "\001\002\000\020\016\045\017\052\050\046\051\043\053" +
    "\061\054\054\055\060\001\002\000\012\003\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\001\002\000\014\003\uffa8\023\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\001\002\000\012\003\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\001\002\000\010\042\063\043\064\047" +
    "\065\001\002\000\020\016\045\017\052\050\046\051\043" +
    "\053\061\054\054\055\060\001\002\000\020\016\045\017" +
    "\052\050\046\051\043\053\061\054\054\055\060\001\002" +
    "\000\020\016\045\017\052\050\046\051\043\053\061\054" +
    "\054\055\060\001\002\000\020\003\073\033\076\034\074" +
    "\035\071\036\072\037\067\040\075\001\002\000\026\003" +
    "\055\016\045\017\052\042\056\043\050\050\046\051\043" +
    "\053\061\054\054\055\060\001\002\000\022\003\uffc5\010" +
    "\uffc5\023\uffc5\025\uffc5\027\uffc5\030\uffc5\032\uffc5\052\uffc5" +
    "\001\002\000\026\003\055\016\045\017\052\042\056\043" +
    "\050\050\046\051\043\053\061\054\054\055\060\001\002" +
    "\000\026\003\055\016\045\017\052\042\056\043\050\050" +
    "\046\051\043\053\061\054\054\055\060\001\002\000\022" +
    "\003\uffb8\010\uffb8\023\uffb8\025\uffb8\027\uffb8\030\uffb8\032" +
    "\uffb8\052\uffb8\001\002\000\026\003\055\016\045\017\052" +
    "\042\056\043\050\050\046\051\043\053\061\054\054\055" +
    "\060\001\002\000\026\003\055\016\045\017\052\042\056" +
    "\043\050\050\046\051\043\053\061\054\054\055\060\001" +
    "\002\000\026\003\055\016\045\017\052\042\056\043\050" +
    "\050\046\051\043\053\061\054\054\055\060\001\002\000" +
    "\022\003\uffbe\010\uffbe\023\uffbe\025\uffbe\027\uffbe\030\uffbe" +
    "\032\uffbe\052\uffbe\001\002\000\022\003\uffba\010\uffba\023" +
    "\uffba\025\uffba\027\uffba\030\uffba\032\uffba\052\uffba\001\002" +
    "\000\022\003\uffbd\010\uffbd\023\uffbd\025\uffbd\027\uffbd\030" +
    "\uffbd\032\uffbd\052\uffbd\001\002\000\022\003\uffbb\010\uffbb" +
    "\023\uffbb\025\uffbb\027\uffbb\030\uffbb\032\uffbb\052\uffbb\001" +
    "\002\000\022\003\uffbc\010\uffbc\023\uffbc\025\uffbc\027\uffbc" +
    "\030\uffbc\032\uffbc\052\uffbc\001\002\000\022\003\uffb9\010" +
    "\uffb9\023\uffb9\025\uffb9\027\uffb9\030\uffb9\032\uffb9\052\uffb9" +
    "\001\002\000\010\042\063\043\064\047\065\001\002\000" +
    "\004\003\107\001\002\000\020\003\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\001\002\000\010\042" +
    "\063\043\064\047\065\001\002\000\020\003\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\001\002\000" +
    "\010\042\063\043\064\047\065\001\002\000\020\003\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\001" +
    "\002\000\004\052\uffa9\001\002\000\004\052\uffab\001\002" +
    "\000\026\003\055\016\045\017\052\042\056\043\050\050" +
    "\046\051\043\053\061\054\054\055\060\001\002\000\004" +
    "\052\uffaa\001\002\000\020\003\073\033\076\034\074\035" +
    "\071\036\072\037\067\040\075\001\002\000\022\003\uffc3" +
    "\010\uffc3\023\uffc3\025\uffc3\027\uffc3\030\uffc3\032\uffc3\052" +
    "\uffc3\001\002\000\010\042\063\043\064\047\065\001\002" +
    "\000\020\003\073\033\076\034\074\035\071\036\072\037" +
    "\067\040\075\001\002\000\022\003\uffc4\010\uffc4\023\uffc4" +
    "\025\uffc4\027\uffc4\030\uffc4\032\uffc4\052\uffc4\001\002\000" +
    "\020\016\045\017\052\050\046\051\043\053\061\054\054" +
    "\055\060\001\002\000\020\016\045\017\052\050\046\051" +
    "\043\053\061\054\054\055\060\001\002\000\010\042\uffb3" +
    "\043\uffb3\047\uffb3\001\002\000\010\042\uffb7\043\uffb7\047" +
    "\uffb7\001\002\000\020\016\045\017\052\050\046\051\043" +
    "\053\061\054\054\055\060\001\002\000\012\003\127\044" +
    "\131\045\126\046\125\001\002\000\010\042\uffb5\043\uffb5" +
    "\047\uffb5\001\002\000\012\003\127\044\131\045\126\046" +
    "\125\001\002\000\010\042\uffb6\043\uffb6\047\uffb6\001\002" +
    "\000\012\003\127\044\131\045\126\046\125\001\002\000" +
    "\010\042\uffb4\043\uffb4\047\uffb4\001\002\000\012\003\uffae" +
    "\044\uffae\045\uffae\046\uffae\001\002\000\012\003\uffd7\010" +
    "\uffd7\025\uffd7\030\uffd7\001\002\000\004\052\143\001\002" +
    "\000\012\003\uffaf\044\uffaf\045\uffaf\046\uffaf\001\002\000" +
    "\026\003\055\016\045\017\052\042\056\043\050\050\046" +
    "\051\043\053\061\054\054\055\060\001\002\000\012\003" +
    "\uffd9\010\uffd9\025\uffd9\030\uffd9\001\002\000\004\055\060" +
    "\001\002\000\004\052\156\001\002\000\006\003\152\023" +
    "\153\001\002\000\016\003\ufff7\007\ufff7\011\ufff7\022\ufff7" +
    "\025\ufff7\052\ufff7\001\002\000\016\003\ufff5\007\ufff5\011" +
    "\ufff5\022\ufff5\025\ufff5\052\ufff5\001\002\000\004\055\060" +
    "\001\002\000\006\003\152\023\153\001\002\000\016\003" +
    "\ufff6\007\ufff6\011\ufff6\022\ufff6\025\ufff6\052\ufff6\001\002" +
    "\000\010\003\uffda\010\uffda\025\uffda\001\002\000\004\027" +
    "\160\001\002\000\020\003\032\007\022\020\161\021\165" +
    "\026\031\031\025\055\036\001\002\000\004\051\200\001" +
    "\002\000\006\003\176\030\175\001\002\000\012\003\uffd4" +
    "\010\uffd4\025\uffd4\030\uffd4\001\002\000\012\003\uffd2\010" +
    "\uffd2\025\uffd2\030\uffd2\001\002\000\004\051\171\001\002" +
    "\000\012\003\uffd5\010\uffd5\025\uffd5\030\uffd5\001\002\000" +
    "\012\003\uffd1\010\uffd1\025\uffd1\030\uffd1\001\002\000\012" +
    "\003\uffd3\010\uffd3\025\uffd3\030\uffd3\001\002\000\004\055" +
    "\060\001\002\000\004\052\173\001\002\000\012\003\uffcf" +
    "\010\uffcf\025\uffcf\030\uffcf\001\002\000\012\003\uffd6\010" +
    "\uffd6\025\uffd6\030\uffd6\001\002\000\020\003\032\007\022" +
    "\020\161\021\165\026\031\031\025\055\036\001\002\000" +
    "\012\003\uffcd\010\uffcd\025\uffcd\030\uffcd\001\002\000\012" +
    "\003\uffce\010\uffce\025\uffce\030\uffce\001\002\000\004\055" +
    "\060\001\002\000\004\052\202\001\002\000\012\003\uffd0" +
    "\010\uffd0\025\uffd0\030\uffd0\001\002\000\020\003\032\007" +
    "\022\020\024\021\033\026\031\031\025\055\036\001\002" +
    "\000\004\010\uffe1\001\002\000\004\010\206\001\002\000" +
    "\016\003\uffe3\007\uffe3\010\uffe3\024\uffe3\025\uffe3\030\uffe3" +
    "\001\002\000\006\003\204\025\203\001\002\000\004\010" +
    "\uffe2\001\002\000\004\032\212\001\002\000\014\003\032" +
    "\007\217\026\031\031\025\055\036\001\002\000\012\003" +
    "\uffca\010\uffca\025\uffca\030\uffca\001\002\000\012\003\uffc8" +
    "\010\uffc8\025\uffc8\030\uffc8\001\002\000\012\003\uffcb\010" +
    "\uffcb\025\uffcb\030\uffcb\001\002\000\012\003\uffcc\010\uffcc" +
    "\025\uffcc\030\uffcc\001\002\000\020\003\032\007\022\020" +
    "\024\021\033\026\031\031\025\055\036\001\002\000\012" +
    "\003\uffc7\010\uffc7\025\uffc7\030\uffc7\001\002\000\004\025" +
    "\222\001\002\000\020\003\032\007\022\020\024\021\033" +
    "\026\031\031\025\055\036\001\002\000\004\010\224\001" +
    "\002\000\012\003\uffc9\010\uffc9\025\uffc9\030\uffc9\001\002" +
    "\000\004\055\060\001\002\000\004\052\227\001\002\000" +
    "\010\003\uffdb\010\uffdb\025\uffdb\001\002\000\012\003\232" +
    "\007\022\011\014\025\231\001\002\000\020\003\236\007" +
    "\022\011\014\013\011\014\017\015\013\025\231\001\002" +
    "\000\010\007\ufff8\024\ufff8\025\ufff8\001\002\000\010\007" +
    "\ufff9\024\ufff9\025\ufff9\001\002\000\010\007\ufffd\024\ufffd" +
    "\025\ufffd\001\002\000\010\007\ufffa\024\ufffa\025\ufffa\001" +
    "\002\000\012\007\ufff8\024\ufff8\025\ufff8\055\uffe4\001\002" +
    "\000\004\055\060\001\002\000\012\003\232\007\022\011" +
    "\014\025\231\001\002\000\010\007\ufffb\024\ufffb\025\ufffb" +
    "\001\002\000\010\003\245\025\243\051\246\001\002\000" +
    "\016\003\016\007\022\011\014\013\011\014\017\015\013" +
    "\001\002\000\010\007\ufff4\024\ufff4\025\ufff4\001\002\000" +
    "\010\007\ufff0\024\ufff0\025\ufff0\001\002\000\010\003\251" +
    "\012\247\055\060\001\002\000\004\055\060\001\002\000" +
    "\004\022\270\001\002\000\006\003\uffe8\025\uffe8\001\002" +
    "\000\004\052\261\001\002\000\006\003\255\025\254\001" +
    "\002\000\010\003\251\012\247\055\060\001\002\000\004" +
    "\052\uffeb\001\002\000\004\052\uffed\001\002\000\006\003" +
    "\255\025\254\001\002\000\004\052\uffec\001\002\000\004" +
    "\025\262\001\002\000\016\003\016\007\022\011\014\013" +
    "\011\014\017\015\013\001\002\000\006\007\022\025\264" +
    "\001\002\000\006\007\022\011\014\001\002\000\010\007" +
    "\uffee\024\uffee\025\uffee\001\002\000\010\007\ufff2\024\ufff2" +
    "\025\ufff2\001\002\000\010\007\uffef\024\uffef\025\uffef\001" +
    "\002\000\012\003\016\013\011\014\017\015\013\001\002" +
    "\000\006\003\uffe9\025\uffe9\001\002\000\004\022\273\001" +
    "\002\000\012\003\016\013\011\014\017\015\013\001\002" +
    "\000\006\003\uffea\025\uffea\001\002\000\006\007\022\025" +
    "\264\001\002\000\010\007\ufff1\024\ufff1\025\ufff1\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\011\004\020\010\014\016\017\017\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\227\040\147\001\001\000\002\001\001" +
    "\000\020\017\037\021\026\022\034\023\025\024\027\027" +
    "\036\040\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\031\210\033\041\035\050\037\046\040\056\001" +
    "\001\000\002\001\001\000\004\020\204\001\001\000\002" +
    "\001\001\000\014\031\156\033\041\035\050\037\046\040" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\031\052\033\041\035\050" +
    "\037\046\040\056\041\043\001\001\000\002\001\001\000" +
    "\014\031\141\033\041\035\050\037\046\040\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\137\040" +
    "\056\001\001\000\004\036\127\001\001\000\010\035\121" +
    "\037\046\040\056\001\001\000\004\034\117\001\001\000" +
    "\002\001\001\000\004\042\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\061\037\046\040\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\065\001\001\000\010\035\111\037\046\040" +
    "\056\001\001\000\010\035\107\037\046\040\056\001\001" +
    "\000\010\035\104\037\046\040\056\001\001\000\004\032" +
    "\067\001\001\000\012\033\103\035\050\037\046\040\056" +
    "\001\001\000\002\001\001\000\012\033\102\035\050\037" +
    "\046\040\056\001\001\000\012\033\101\035\050\037\046" +
    "\040\056\001\001\000\002\001\001\000\012\033\100\035" +
    "\050\037\046\040\056\001\001\000\012\033\077\035\050" +
    "\037\046\040\056\001\001\000\012\033\076\035\050\037" +
    "\046\040\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\110\001\001\000\002\001" +
    "\001\000\004\034\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\031\116\033\041\035" +
    "\050\037\046\040\056\001\001\000\002\001\001\000\004" +
    "\032\120\001\001\000\002\001\001\000\004\034\122\001" +
    "\001\000\004\032\123\001\001\000\002\001\001\000\006" +
    "\037\135\040\056\001\001\000\006\037\133\040\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\131" +
    "\040\056\001\001\000\004\036\132\001\001\000\002\001" +
    "\001\000\004\036\134\001\001\000\002\001\001\000\004" +
    "\036\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\031\144\033\041\035\050\037\046\040\056\001\001\000" +
    "\002\001\001\000\006\006\146\040\147\001\001\000\002" +
    "\001\001\000\004\007\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\153\001\001\000\004\007\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\167\022\165\023\162\024\163\025\161" +
    "\027\166\040\033\001\001\000\002\001\001\000\004\026" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\171\040\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\167\022" +
    "\165\023\162\024\163\025\176\027\166\040\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\200\040" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\037\021\206\022\034\023\025\024\027\027\036\040" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\022\214\023\212\024\213\027\217" +
    "\030\215\040\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\037" +
    "\021\220\022\034\023\025\024\027\027\036\040\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\037" +
    "\021\222\022\034\023\025\024\027\027\036\040\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\225" +
    "\040\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\233\010\232\017\022\001\001\000\012\005\234" +
    "\010\232\016\236\017\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\237\040\147\001\001\000\010\005" +
    "\240\010\232\017\022\001\001\000\002\001\001\000\004" +
    "\011\243\001\001\000\014\003\274\004\020\010\014\016" +
    "\017\017\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\247\013\251\014\252\040\147\001\001\000" +
    "\006\006\271\040\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\255\001\001\000" +
    "\010\006\247\014\256\040\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\262\004\020\010\014" +
    "\016\017\017\022\001\001\000\006\012\265\017\264\001" +
    "\001\000\006\010\266\017\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\273" +
    "\001\001\000\002\001\001\000\006\012\275\017\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variavel ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lista_expressoes2 ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Faltou ,");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_expressoes2 ::= VIRGULA expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_expressoes ::= expressao lista_expressoes2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // fator ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // fator ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // fator ::= OP_NOT fator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // fator ::= PARENTESES_ABRE expressao PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fator ::= NUMERO_REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fator ::= NUMERO_INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fator ::= variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // termo2 ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Faltou operador * ou DIV ou AND");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termo2 ::= OP_AND fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // termo2 ::= OP_DIVISAO fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // termo2 ::= OP_MULTIPLICACAO fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // termo ::= fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // relacao ::= error 
            {
              Object RESULT =null;
		System.out.println("Error: Falta um simbolo = ou <> ou < ou <= ou > ou >=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relacao ::= SIMBOLO_MAIOR expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relacao ::= SIMBOLO_MAIOR_IGUAL expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relacao ::= SIMBOLO_MENOR_IGUAL expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relacao ::= SIMBOLO_MENOR expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relacao ::= SIMBOLO_DIFERENTE expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relacao ::= SIMBOLO_IGUAL expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expressao_simples2 ::= OP_OR termo expressao_simples2 error 
            {
              Object RESULT =null;
		System.out.println("Erro: Falta um operador + ou - ou OR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expressao_simples2 ::= OP_SUBTRACAO termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expressao_simples2 ::= OP_ADICAO termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expressao_simples ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Falta um operador + ou -");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressao_simples ::= termo expressao_simples2 relacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expressao_simples ::= OP_SUBTRACAO termo expressao_simples2 relacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expressao_simples ::= OP_ADICAO termo expressao_simples2 relacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expressao ::= expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comando_repetitivo2 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comando_repetitivo2 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comando_repetitivo2 ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comando_repetitivo2 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comando_repetitivo2 ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comando_repetitivo ::= WHILE expressao DO comando_repetitivo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comando_condicional2 ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Faltou else");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comando_condicional2 ::= ELSE comando_condicional12 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comando_condicional12 ::= WRITE PARENTESES_ABRE lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comando_condicional12 ::= READ PARENTESES_ABRE lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comando_condicional12 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comando_condicional12 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comando_condicional12 ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comando_condicional12 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comando_condicional12 ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comando_condicional1 ::= IF expressao THEN comando_condicional12 comando_condicional2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // chamada_procedimento ::= IDENTIFICADOR PARENTESES_ABRE lista_expressoes PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atribuicao ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Faltou :=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // atribuicao ::= variavel OP_ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comando ::= WRITE PARENTESES_ABRE lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando ::= READ PARENTESES_ABRE lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comando ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comando ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comando ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comando ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comando ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comando_composto2 ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Faltou ;");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comando_composto2 ::= PONTO_VIRGULA comando comando_composto2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando_composto ::= BEGIN comando comando_composto2 END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Declaração de tipo");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // secao_parametros_formais ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Seção de parametros formais");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // secao_parametros_formais ::= lista_identificadores DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // secao_parametros_formais ::= VAR lista_identificadores DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // secao_parametros_formais2 ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Faltou ;");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // secao_parametros_formais2 ::= PONTO_VIRGULA secao_parametros_formais secao_parametros_formais2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros_formais ::= secao_parametros_formais secao_parametros_formais2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_formais",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracao_procedimentos1 ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracao_procedimentos1 ::= PONTO_VIRGULA parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracao_procedimentos ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Declaração procedimentos");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracao_procedimentos ::= PONTO_VIRGULA bloco declaracao_procedimentos1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracao_procedimentos ::= PARENTESES_ABRE parametros_formais PARENTESES_FECHA PONTO_VIRGULA bloco declaracao_procedimentos1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parte_declaracao_sub_rotinas ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_sub_rotinas",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parte_declaracao_sub_rotinas ::= PROCEDURE IDENTIFICADOR declaracao_procedimentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_sub_rotinas",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_identificadores2 ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Faltou ,");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_identificadores2 ::= VIRGULA variavel lista_identificadores2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_identificadores ::= variavel lista_identificadores2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parte_declaracao_variaveis2 ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Faltou ;");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parte_declaracao_variaveis2 ::= parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parte_declaracao_variaveis2 ::= PONTO_VIRGULA parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parte_declaracao_variaveis2 ::= PONTO_VIRGULA tipo lista_identificadores parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parte_declaracao_variaveis ::= parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parte_declaracao_variaveis ::= tipo lista_identificadores parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloco ::= parte_declaracao_variaveis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error 
            {
              Object RESULT =null;
		System.out.println("Erro: Estrutura do programa está errada");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PROGRAM IDENTIFICADOR PONTO_VIRGULA bloco PONTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

