
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 14 22:41:26 BRT 2017
//----------------------------------------------------

package sintatico;

import java_cup.runtime.Symbol;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 14 22:41:26 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\003\003\000\002\043\002\000\002\044\002\000" +
    "\002\004\007\000\002\004\003\000\002\004\005\000\002" +
    "\005\006\000\002\005\004\000\002\005\003\000\002\005" +
    "\006\000\002\005\004\000\002\006\004\000\002\007\005" +
    "\000\002\007\002\000\002\010\005\000\002\010\003\000" +
    "\002\011\010\000\002\011\005\000\002\012\004\000\002" +
    "\012\003\000\002\012\004\000\002\013\004\000\002\015" +
    "\005\000\002\015\005\000\002\014\006\000\002\014\005" +
    "\000\002\014\006\000\002\014\006\000\002\014\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\012\000\002\020\005\000\002\020\005\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\006\000\002\021\006\000" +
    "\002\021\006\000\002\021\006\000\002\021\006\000\002" +
    "\021\006\000\002\021\006\000\002\022\005\000\002\022" +
    "\005\000\002\023\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\024\007\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\006\000\002\025\006\000\002\026" +
    "\004\000\002\027\006\000\002\030\003\000\002\030\003" +
    "\000\002\030\007\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\033\006\000\002\033\006\000\002" +
    "\033\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\002\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\002\000\002\035\004\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\002\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\005\000\002\037\004\000\002\037\003\000" +
    "\002\037\003\000\002\041\004\000\002\042\004\000\002" +
    "\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\006\003\005\006\006\001\002\000\004\002" +
    "\362\001\002\000\004\055\356\001\002\000\006\003\007" +
    "\055\010\001\002\000\004\025\353\001\002\000\006\003" +
    "\012\025\011\001\002\000\016\003\021\007\024\011\016" +
    "\013\013\014\020\015\015\001\002\000\016\003\021\007" +
    "\024\011\016\013\013\014\020\015\015\001\002\000\010" +
    "\003\uffde\025\uffde\055\uffde\001\002\000\004\024\347\001" +
    "\002\000\010\003\uffdd\025\uffdd\055\uffdd\001\002\000\004" +
    "\055\300\001\002\000\012\003\ufff7\007\ufff7\024\ufff7\025" +
    "\ufff7\001\002\000\010\003\uffdc\025\uffdc\055\uffdc\001\002" +
    "\000\004\055\063\001\002\000\004\055\ufffa\001\002\000" +
    "\012\003\ufffb\007\ufffb\024\ufffb\025\ufffb\001\002\000\020" +
    "\003\035\007\024\020\026\021\034\026\033\031\027\055" +
    "\040\001\002\000\012\003\uffec\007\uffec\024\uffec\025\uffec" +
    "\001\002\000\006\003\250\051\251\001\002\000\024\016" +
    "\050\017\056\042\060\043\054\050\051\051\047\053\062" +
    "\054\057\055\063\001\002\000\010\003\uffd7\010\uffd7\025" +
    "\uffd7\001\002\000\006\003\221\025\220\001\002\000\010" +
    "\003\uffd5\010\uffd5\025\uffd5\001\002\000\024\016\050\017" +
    "\056\042\060\043\054\050\051\051\047\053\062\054\057" +
    "\055\063\001\002\000\006\003\163\051\164\001\002\000" +
    "\004\051\151\001\002\000\006\003\146\041\145\001\002" +
    "\000\010\003\uffd8\010\uffd8\025\uffd8\001\002\000\010\003" +
    "\uff9a\041\uff9a\051\044\001\002\000\010\003\uffd4\010\uffd4" +
    "\025\uffd4\001\002\000\010\003\uffd6\010\uffd6\025\uffd6\001" +
    "\002\000\024\016\050\017\056\042\060\043\054\050\051" +
    "\051\047\053\062\054\057\055\063\001\002\000\024\016" +
    "\050\017\056\042\060\043\054\050\051\051\047\053\062" +
    "\054\057\055\063\001\002\000\022\003\uffb7\010\uffb7\023" +
    "\uffb7\025\uffb7\027\uffb7\030\uffb7\032\uffb7\052\uffb7\001\002" +
    "\000\006\003\141\052\142\001\002\000\024\016\050\017" +
    "\056\042\060\043\054\050\051\051\047\053\062\054\057" +
    "\055\063\001\002\000\052\003\uff9e\010\uff9e\023\uff9e\025" +
    "\uff9e\027\uff9e\030\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\052\uff9e\001\002\000\020\016\050" +
    "\017\056\050\051\051\047\053\062\054\057\055\063\001" +
    "\002\000\052\003\uffa4\010\uffa4\023\uffa4\025\uffa4\027\uffa4" +
    "\030\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\042\uffa4\043\uffa4\044\127\045\125\046\124" +
    "\047\uffa4\052\uffa4\001\002\000\004\023\122\001\002\000" +
    "\020\016\050\017\056\050\051\051\047\053\062\054\057" +
    "\055\063\001\002\000\044\003\uffb0\010\uffb0\023\uffb0\025" +
    "\uffb0\027\uffb0\030\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\042\065\043\066\047\067\052" +
    "\uffb0\001\002\000\052\003\uff9d\010\uff9d\023\uff9d\025\uff9d" +
    "\027\uff9d\030\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\052\uff9d\001\002\000\052\003\uffa1\010" +
    "\uffa1\023\uffa1\025\uffa1\027\uffa1\030\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\052\uffa1\001\002" +
    "\000\020\016\050\017\056\050\051\051\047\053\062\054" +
    "\057\055\063\001\002\000\052\003\uffa3\010\uffa3\023\uffa3" +
    "\025\uffa3\027\uffa3\030\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\052\uffa3\001\002\000\052\003" +
    "\uffa2\010\uffa2\023\uffa2\025\uffa2\027\uffa2\030\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\052\uffa2" +
    "\001\002\000\060\003\uff9a\007\uff9a\010\uff9a\011\uff9a\022" +
    "\uff9a\023\uff9a\025\uff9a\027\uff9a\030\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\052\uff9a\001\002" +
    "\000\044\003\uffb0\010\uffb0\023\uffb0\025\uffb0\027\uffb0\030" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\042\065\043\066\047\067\052\uffb0\001\002\000" +
    "\020\016\050\017\056\050\051\051\047\053\062\054\057" +
    "\055\063\001\002\000\020\016\050\017\056\050\051\051" +
    "\047\053\062\054\057\055\063\001\002\000\020\016\050" +
    "\017\056\050\051\051\047\053\062\054\057\055\063\001" +
    "\002\000\036\003\uffa9\010\uffa9\023\uffa9\025\uffa9\027\uffa9" +
    "\030\uffa9\032\uffa9\033\077\034\075\035\073\036\074\037" +
    "\071\040\076\052\uffa9\001\002\000\024\016\050\017\056" +
    "\042\060\043\054\050\051\051\047\053\062\054\057\055" +
    "\063\001\002\000\022\003\uffb6\010\uffb6\023\uffb6\025\uffb6" +
    "\027\uffb6\030\uffb6\032\uffb6\052\uffb6\001\002\000\024\016" +
    "\050\017\056\042\060\043\054\050\051\051\047\053\062" +
    "\054\057\055\063\001\002\000\024\016\050\017\056\042" +
    "\060\043\054\050\051\051\047\053\062\054\057\055\063" +
    "\001\002\000\024\016\050\017\056\042\060\043\054\050" +
    "\051\051\047\053\062\054\057\055\063\001\002\000\024" +
    "\016\050\017\056\042\060\043\054\050\051\051\047\053" +
    "\062\054\057\055\063\001\002\000\024\016\050\017\056" +
    "\042\060\043\054\050\051\051\047\053\062\054\057\055" +
    "\063\001\002\000\022\003\uffaf\010\uffaf\023\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\032\uffaf\052\uffaf\001\002\000\022\003" +
    "\uffab\010\uffab\023\uffab\025\uffab\027\uffab\030\uffab\032\uffab" +
    "\052\uffab\001\002\000\022\003\uffae\010\uffae\023\uffae\025" +
    "\uffae\027\uffae\030\uffae\032\uffae\052\uffae\001\002\000\022" +
    "\003\uffac\010\uffac\023\uffac\025\uffac\027\uffac\030\uffac\032" +
    "\uffac\052\uffac\001\002\000\022\003\uffad\010\uffad\023\uffad" +
    "\025\uffad\027\uffad\030\uffad\032\uffad\052\uffad\001\002\000" +
    "\022\003\uffaa\010\uffaa\023\uffaa\025\uffaa\027\uffaa\030\uffaa" +
    "\032\uffaa\052\uffaa\001\002\000\044\003\uffb0\010\uffb0\023" +
    "\uffb0\025\uffb0\027\uffb0\030\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\042\065\043\066\047" +
    "\067\052\uffb0\001\002\000\036\003\uffb1\010\uffb1\023\uffb1" +
    "\025\uffb1\027\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\052\uffb1\001\002\000\044" +
    "\003\uffb0\010\uffb0\023\uffb0\025\uffb0\027\uffb0\030\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\042\065\043\066\047\067\052\uffb0\001\002\000\036\003" +
    "\uffb2\010\uffb2\023\uffb2\025\uffb2\027\uffb2\030\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\052" +
    "\uffb2\001\002\000\044\003\uffb0\010\uffb0\023\uffb0\025\uffb0" +
    "\027\uffb0\030\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\042\065\043\066\047\067\052\uffb0" +
    "\001\002\000\036\003\uffb3\010\uffb3\023\uffb3\025\uffb3\027" +
    "\uffb3\030\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\052\uffb3\001\002\000\036\003\uffa9\010" +
    "\uffa9\023\uffa9\025\uffa9\027\uffa9\030\uffa9\032\uffa9\033\077" +
    "\034\075\035\073\036\074\037\071\040\076\052\uffa9\001" +
    "\002\000\022\003\uffb4\010\uffb4\023\uffb4\025\uffb4\027\uffb4" +
    "\030\uffb4\032\uffb4\052\uffb4\001\002\000\044\003\uffb0\010" +
    "\uffb0\023\uffb0\025\uffb0\027\uffb0\030\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\042\065\043" +
    "\066\047\067\052\uffb0\001\002\000\036\003\uffa9\010\uffa9" +
    "\023\uffa9\025\uffa9\027\uffa9\030\uffa9\032\uffa9\033\077\034" +
    "\075\035\073\036\074\037\071\040\076\052\uffa9\001\002" +
    "\000\022\003\uffb5\010\uffb5\023\uffb5\025\uffb5\027\uffb5\030" +
    "\uffb5\032\uffb5\052\uffb5\001\002\000\006\003\uff9c\052\uff9c" +
    "\001\002\000\024\016\050\017\056\042\060\043\054\050" +
    "\051\051\047\053\062\054\057\055\063\001\002\000\006" +
    "\003\uff9b\052\uff9b\001\002\000\020\016\050\017\056\050" +
    "\051\051\047\053\062\054\057\055\063\001\002\000\020" +
    "\016\050\017\056\050\051\051\047\053\062\054\057\055" +
    "\063\001\002\000\044\003\uffa8\010\uffa8\023\uffa8\025\uffa8" +
    "\027\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\042\uffa8\043\uffa8\047\uffa8\052\uffa8" +
    "\001\002\000\020\016\050\017\056\050\051\051\047\053" +
    "\062\054\057\055\063\001\002\000\052\003\uffa4\010\uffa4" +
    "\023\uffa4\025\uffa4\027\uffa4\030\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\042\uffa4\043\uffa4" +
    "\044\127\045\125\046\124\047\uffa4\052\uffa4\001\002\000" +
    "\044\003\uffa6\010\uffa6\023\uffa6\025\uffa6\027\uffa6\030\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\042\uffa6\043\uffa6\047\uffa6\052\uffa6\001\002\000\052" +
    "\003\uffa4\010\uffa4\023\uffa4\025\uffa4\027\uffa4\030\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\042\uffa4\043\uffa4\044\127\045\125\046\124\047\uffa4\052" +
    "\uffa4\001\002\000\044\003\uffa7\010\uffa7\023\uffa7\025\uffa7" +
    "\027\uffa7\030\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\042\uffa7\043\uffa7\047\uffa7\052\uffa7" +
    "\001\002\000\052\003\uffa4\010\uffa4\023\uffa4\025\uffa4\027" +
    "\uffa4\030\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\042\uffa4\043\uffa4\044\127\045\125\046" +
    "\124\047\uffa4\052\uffa4\001\002\000\044\003\uffa5\010\uffa5" +
    "\023\uffa5\025\uffa5\027\uffa5\030\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\042\uffa5\043\uffa5" +
    "\047\uffa5\052\uffa5\001\002\000\052\003\uff9f\010\uff9f\023" +
    "\uff9f\025\uff9f\027\uff9f\030\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\052\uff9f\001\002\000\004" +
    "\052\140\001\002\000\052\003\uffa0\010\uffa0\023\uffa0\025" +
    "\uffa0\027\uffa0\030\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\052\uffa0\001\002\000\012\003\uffc7" +
    "\010\uffc7\025\uffc7\030\uffc7\001\002\000\012\003\uffca\010" +
    "\uffca\025\uffca\030\uffca\001\002\000\004\052\144\001\002" +
    "\000\012\003\uffc8\010\uffc8\025\uffc8\030\uffc8\001\002\000" +
    "\024\016\050\017\056\042\060\043\054\050\051\051\047" +
    "\053\062\054\057\055\063\001\002\000\024\016\050\017" +
    "\056\042\060\043\054\050\051\051\047\053\062\054\057" +
    "\055\063\001\002\000\012\003\uffcb\010\uffcb\025\uffcb\030" +
    "\uffcb\001\002\000\012\003\uffcc\010\uffcc\025\uffcc\030\uffcc" +
    "\001\002\000\024\016\050\017\056\042\060\043\054\050" +
    "\051\051\047\053\062\054\057\055\063\001\002\000\004" +
    "\052\162\001\002\000\036\023\157\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\052\uffee\001\002\000\004\052" +
    "\155\001\002\000\010\003\uffd1\010\uffd1\025\uffd1\001\002" +
    "\000\016\003\ufff0\007\ufff0\011\ufff0\022\ufff0\025\ufff0\052" +
    "\ufff0\001\002\000\004\055\063\001\002\000\020\003\uffee" +
    "\007\uffee\011\uffee\022\uffee\023\157\025\uffee\052\uffee\001" +
    "\002\000\016\003\uffef\007\uffef\011\uffef\022\uffef\025\uffef" +
    "\052\uffef\001\002\000\012\003\uffc9\010\uffc9\025\uffc9\030" +
    "\uffc9\001\002\000\004\055\063\001\002\000\004\055\063" +
    "\001\002\000\020\003\uffee\007\uffee\011\uffee\022\uffee\023" +
    "\157\025\uffee\052\uffee\001\002\000\006\003\167\052\170" +
    "\001\002\000\010\003\uffcd\010\uffcd\025\uffcd\001\002\000" +
    "\010\003\uffd2\010\uffd2\025\uffd2\001\002\000\004\052\172" +
    "\001\002\000\010\003\uffce\010\uffce\025\uffce\001\002\000" +
    "\004\027\174\001\002\000\020\003\202\007\024\020\175" +
    "\021\201\026\033\031\027\055\040\001\002\000\004\051" +
    "\215\001\002\000\004\030\212\001\002\000\012\003\uffc4" +
    "\010\uffc4\025\uffc4\030\uffc4\001\002\000\012\003\uffc2\010" +
    "\uffc2\025\uffc2\030\uffc2\001\002\000\004\051\207\001\002" +
    "\000\004\051\206\001\002\000\012\003\uffc5\010\uffc5\025" +
    "\uffc5\030\uffc5\001\002\000\012\003\uffc1\010\uffc1\025\uffc1" +
    "\030\uffc1\001\002\000\012\003\uffc3\010\uffc3\025\uffc3\030" +
    "\uffc3\001\002\000\024\016\050\017\056\042\060\043\054" +
    "\050\051\051\047\053\062\054\057\055\063\001\002\000" +
    "\004\055\063\001\002\000\004\052\211\001\002\000\012" +
    "\003\uffbf\010\uffbf\025\uffbf\030\uffbf\001\002\000\020\003" +
    "\202\007\024\020\175\021\201\026\033\031\027\055\040" +
    "\001\002\000\012\003\uffc6\010\uffc6\025\uffc6\030\uffc6\001" +
    "\002\000\012\003\uffbe\010\uffbe\025\uffbe\030\uffbe\001\002" +
    "\000\004\055\063\001\002\000\004\052\217\001\002\000" +
    "\012\003\uffc0\010\uffc0\025\uffc0\030\uffc0\001\002\000\020" +
    "\003\035\007\024\020\026\021\034\026\033\031\027\055" +
    "\040\001\002\000\020\003\035\007\024\020\026\021\034" +
    "\026\033\031\027\055\040\001\002\000\004\010\223\001" +
    "\002\000\004\007\224\001\002\000\020\003\035\007\024" +
    "\020\026\021\034\026\033\031\027\055\040\001\002\000" +
    "\006\003\221\025\220\001\002\000\004\003\227\001\002" +
    "\000\016\003\uffdb\007\uffdb\010\uffdb\024\uffdb\025\uffdb\030" +
    "\uffdb\001\002\000\006\003\221\025\220\001\002\000\006" +
    "\003\uffd9\010\uffd9\001\002\000\006\003\221\025\220\001" +
    "\002\000\006\003\uffda\010\uffda\001\002\000\004\032\235" +
    "\001\002\000\014\003\202\007\242\026\033\031\027\055" +
    "\040\001\002\000\012\003\uffbb\010\uffbb\025\uffbb\030\uffbb" +
    "\001\002\000\012\003\uffb9\010\uffb9\025\uffb9\030\uffb9\001" +
    "\002\000\012\003\uffbc\010\uffbc\025\uffbc\030\uffbc\001\002" +
    "\000\012\003\uffbd\010\uffbd\025\uffbd\030\uffbd\001\002\000" +
    "\020\003\035\007\024\020\026\021\034\026\033\031\027" +
    "\055\040\001\002\000\012\003\uffb8\010\uffb8\025\uffb8\030" +
    "\uffb8\001\002\000\004\025\245\001\002\000\020\003\035" +
    "\007\024\020\026\021\034\026\033\031\027\055\040\001" +
    "\002\000\004\010\247\001\002\000\012\003\uffba\010\uffba" +
    "\025\uffba\030\uffba\001\002\000\004\055\063\001\002\000" +
    "\004\055\063\001\002\000\006\003\253\052\254\001\002" +
    "\000\010\003\uffcf\010\uffcf\025\uffcf\001\002\000\010\003" +
    "\uffd3\010\uffd3\025\uffd3\001\002\000\004\052\256\001\002" +
    "\000\010\003\uffd0\010\uffd0\025\uffd0\001\002\000\004\055" +
    "\063\001\002\000\012\003\ufff9\007\ufff9\011\ufff9\025\ufff9" +
    "\001\002\000\012\003\263\007\024\011\016\025\262\001" +
    "\002\000\020\003\263\007\024\011\016\013\013\014\020" +
    "\015\015\025\262\001\002\000\020\003\263\007\024\011" +
    "\016\013\013\014\020\015\015\025\262\001\002\000\012" +
    "\003\ufff3\007\ufff3\024\ufff3\025\ufff3\001\002\000\012\003" +
    "\ufff8\007\ufff8\024\ufff8\025\ufff8\001\002\000\012\003\ufff1" +
    "\007\ufff1\024\ufff1\025\ufff1\001\002\000\004\055\063\001" +
    "\002\000\012\003\263\007\024\011\016\025\262\001\002" +
    "\000\012\003\ufff2\007\ufff2\024\ufff2\025\ufff2\001\002\000" +
    "\012\003\ufff4\007\ufff4\024\ufff4\025\ufff4\001\002\000\004" +
    "\055\063\001\002\000\012\003\263\007\024\011\016\025" +
    "\262\001\002\000\012\003\ufff5\007\ufff5\024\ufff5\025\ufff5" +
    "\001\002\000\012\003\263\007\024\011\016\025\262\001" +
    "\002\000\012\003\ufff6\007\ufff6\024\ufff6\025\ufff6\001\002" +
    "\000\006\025\301\051\303\001\002\000\016\003\021\007" +
    "\024\011\016\013\013\014\020\015\015\001\002\000\012" +
    "\003\uffed\007\uffed\024\uffed\025\uffed\001\002\000\010\003" +
    "\306\012\304\055\063\001\002\000\004\055\063\001\002" +
    "\000\006\003\334\022\335\001\002\000\004\055\063\001" +
    "\002\000\004\052\320\001\002\000\006\003\312\025\311" +
    "\001\002\000\010\003\306\012\304\055\063\001\002\000" +
    "\010\003\306\012\304\055\063\001\002\000\004\052\uffe6" +
    "\001\002\000\006\003\312\025\311\001\002\000\004\052" +
    "\uffe4\001\002\000\006\003\312\025\311\001\002\000\004" +
    "\052\uffe5\001\002\000\004\025\321\001\002\000\016\003" +
    "\021\007\024\011\016\013\013\014\020\015\015\001\002" +
    "\000\010\003\325\007\024\025\323\001\002\000\006\007" +
    "\024\011\016\001\002\000\012\003\uffe8\007\uffe8\024\uffe8" +
    "\025\uffe8\001\002\000\006\007\024\011\016\001\002\000" +
    "\012\003\uffeb\007\uffeb\024\uffeb\025\uffeb\001\002\000\012" +
    "\003\uffe7\007\uffe7\024\uffe7\025\uffe7\001\002\000\012\003" +
    "\uffe9\007\uffe9\024\uffe9\025\uffe9\001\002\000\004\022\332" +
    "\001\002\000\010\013\013\014\020\015\015\001\002\000" +
    "\006\003\uffe1\025\uffe1\001\002\000\010\013\013\014\020" +
    "\015\015\001\002\000\010\013\013\014\020\015\015\001" +
    "\002\000\006\003\uffe2\025\uffe2\001\002\000\006\003\uffdf" +
    "\025\uffdf\001\002\000\006\003\341\022\342\001\002\000" +
    "\010\013\013\014\020\015\015\001\002\000\010\013\013" +
    "\014\020\015\015\001\002\000\006\003\uffe3\025\uffe3\001" +
    "\002\000\006\003\uffe0\025\uffe0\001\002\000\010\003\325" +
    "\007\024\025\323\001\002\000\012\003\uffea\007\uffea\024" +
    "\uffea\025\uffea\001\002\000\004\002\ufffd\001\002\000\006" +
    "\003\351\024\352\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\000\001\002\000\016\003\021\007\024\011\016" +
    "\013\013\014\020\015\015\001\002\000\004\024\355\001" +
    "\002\000\004\002\ufffe\001\002\000\004\025\357\001\002" +
    "\000\016\003\021\007\024\011\016\013\013\014\020\015" +
    "\015\001\002\000\004\024\361\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\347\004\022\010\016\016\021\017" +
    "\024\001\001\000\014\003\013\004\022\010\016\016\021" +
    "\017\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\275\040\164\001\001\000\004\043" +
    "\256\001\001\000\002\001\001\000\020\017\041\021\030" +
    "\022\036\023\027\024\031\027\040\040\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\233\033\044" +
    "\035\054\037\051\040\060\001\001\000\002\001\001\000" +
    "\004\020\221\001\001\000\002\001\001\000\014\031\172" +
    "\033\044\035\054\037\051\040\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\052\033\044\035\054\037\051\040\060\041\142" +
    "\001\001\000\016\031\052\033\044\035\054\037\051\040" +
    "\060\041\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\031\136\033\044\035\054\037\051\040\060\001" +
    "\001\000\002\001\001\000\006\037\135\040\060\001\001" +
    "\000\004\036\125\001\001\000\004\042\120\001\001\000" +
    "\010\035\115\037\051\040\060\001\001\000\004\034\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\035" +
    "\063\037\051\040\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\067\001\001\000" +
    "\010\035\111\037\051\040\060\001\001\000\010\035\107" +
    "\037\051\040\060\001\001\000\010\035\105\037\051\040" +
    "\060\001\001\000\004\032\071\001\001\000\012\033\104" +
    "\035\054\037\051\040\060\001\001\000\002\001\001\000" +
    "\012\033\103\035\054\037\051\040\060\001\001\000\012" +
    "\033\102\035\054\037\051\040\060\001\001\000\012\033" +
    "\101\035\054\037\051\040\060\001\001\000\012\033\100" +
    "\035\054\037\051\040\060\001\001\000\012\033\077\035" +
    "\054\037\051\040\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\106\001\001\000\002" +
    "\001\001\000\004\034\110\001\001\000\002\001\001\000" +
    "\004\034\112\001\001\000\002\001\001\000\004\032\114" +
    "\001\001\000\002\001\001\000\004\034\116\001\001\000" +
    "\004\032\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\031\122\033\044\035\054\037\051\040\060\001" +
    "\001\000\002\001\001\000\006\037\133\040\060\001\001" +
    "\000\006\037\131\040\060\001\001\000\002\001\001\000" +
    "\006\037\127\040\060\001\001\000\004\036\130\001\001" +
    "\000\002\001\001\000\004\036\132\001\001\000\002\001" +
    "\001\000\004\036\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\031\147\033\044\035\054\037\051\040\060\001" +
    "\001\000\014\031\146\033\044\035\054\037\051\040\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\153\031\052\033\044\035\054\037\051\040\152\041\151" +
    "\001\001\000\002\001\001\000\004\007\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\157\001\001\000\004\007\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\170\040\164\001\001" +
    "\000\006\006\165\040\164\001\001\000\004\007\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\204\022\202\023\176\024\177\025\175\027\203" +
    "\040\035\001\001\000\002\001\001\000\004\026\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\031\052\033\044\035\054\037\051" +
    "\040\060\041\151\001\001\000\006\006\207\040\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\017\204" +
    "\022\202\023\176\024\177\025\213\027\203\040\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\215" +
    "\040\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\041\021\231\022\036\023\027\024\031\027\040" +
    "\040\035\001\001\000\020\017\041\021\227\022\036\023" +
    "\027\024\031\027\040\040\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\041\021\224\022\036\023" +
    "\027\024\031\027\040\040\035\001\001\000\004\020\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\230\001\001\000\002\001\001\000\004\020\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\022\237\023" +
    "\235\024\236\027\242\030\240\040\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\041\021\243\022\036\023\027\024\031" +
    "\027\040\040\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\041\021\245\022\036\023\027\024\031" +
    "\027\040\040\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\254\040\164\001\001\000\006\006\251" +
    "\040\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\257\040\164\001\001\000\004\044\260\001\001\000" +
    "\010\005\264\010\263\017\024\001\001\000\012\005\271" +
    "\010\263\016\272\017\024\001\001\000\012\005\265\010" +
    "\263\016\266\017\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\267\040\164\001" +
    "\001\000\010\005\270\010\263\017\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\273\040\164\001" +
    "\001\000\010\005\274\010\263\017\024\001\001\000\002" +
    "\001\001\000\010\005\276\010\263\017\024\001\001\000" +
    "\002\001\001\000\004\011\301\001\001\000\014\003\344" +
    "\004\022\010\016\016\021\017\024\001\001\000\002\001" +
    "\001\000\012\006\304\013\306\014\307\040\164\001\001" +
    "\000\006\006\337\040\164\001\001\000\002\001\001\000" +
    "\006\006\330\040\164\001\001\000\002\001\001\000\004" +
    "\015\312\001\001\000\010\006\304\014\315\040\164\001" +
    "\001\000\010\006\304\014\313\040\164\001\001\000\002" +
    "\001\001\000\004\015\314\001\001\000\002\001\001\000" +
    "\004\015\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\321\004\022\010\016\016\021\017\024\001" +
    "\001\000\006\012\325\017\323\001\001\000\006\010\327" +
    "\017\024\001\001\000\002\001\001\000\006\010\326\017" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\332\001\001\000" +
    "\002\001\001\000\004\016\336\001\001\000\004\016\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\343\001\001\000\004\016\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\345\017" +
    "\323\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\353\004\022\010\016\016\021\017\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\357\004\022\010\016\016\021\017\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /*public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        
        Symbol s = (Symbol) info;
        System.out.println("Error - " + message + info);
        System.out.println("Erro de sintaxe - Linha: " + s.left + " Coluna: " + s.right + " Texto: " + s.value + "\n");
        RecuperacaoErros.erros.add("Erro de sintaxe - Linha: " + s.left + " Coluna: " + s.right + " Texto: " + s.value + "\n");

        //System.exit(0);
    }*/

    public void report_error(String message, Object info)  {
        Symbol s = (Symbol) info;
        System.out.println("Error - " + message + info);
        System.out.println("Erro de sintaxe - Linha: " + s.left + " Coluna: " + s.right + " Texto: " + s.value + "\n");
        RecuperacaoErros.erros.add("Erro de sintaxe - Linha: " + s.left + " Coluna: " + s.right + " Texto: " + s.value + "\n");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variavel ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_expressoes2 ::= VIRGULA expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_expressoes ::= expressao lista_expressoes2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expressoes",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // fator ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // fator ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // fator ::= OP_NOT fator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // fator ::= PARENTESES_ABRE expressao PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // fator ::= NUMERO_REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fator ::= NUMERO_INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fator ::= variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // termo2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // termo2 ::= OP_AND fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // termo2 ::= OP_DIVISAO fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // termo2 ::= OP_MULTIPLICACAO fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // termo ::= fator termo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // relacao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // relacao ::= SIMBOLO_MAIOR expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // relacao ::= SIMBOLO_MAIOR_IGUAL expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // relacao ::= SIMBOLO_MENOR_IGUAL expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // relacao ::= SIMBOLO_MENOR expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // relacao ::= SIMBOLO_DIFERENTE expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relacao ::= SIMBOLO_IGUAL expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expressao_simples2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expressao_simples2 ::= OP_OR termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expressao_simples2 ::= OP_SUBTRACAO termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expressao_simples2 ::= OP_ADICAO termo expressao_simples2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expressao_simples ::= termo expressao_simples2 relacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expressao_simples ::= OP_SUBTRACAO termo expressao_simples2 relacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expressao_simples ::= OP_ADICAO termo expressao_simples2 relacao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_simples",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expressao ::= expressao_simples 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comando_repetitivo2 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comando_repetitivo2 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comando_repetitivo2 ::= BEGIN comando PONTO_VIRGULA comando END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comando_repetitivo2 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comando_repetitivo2 ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comando_repetitivo ::= WHILE expressao DO comando_repetitivo2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comando_condicional2 ::= ELSE comando_condicional12 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional2",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comando_condicional12 ::= WRITE PARENTESES_ABRE lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comando_condicional12 ::= READ PARENTESES_ABRE lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comando_condicional12 ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comando_condicional12 ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comando_condicional12 ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comando_condicional12 ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comando_condicional12 ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional12",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comando_condicional1 ::= IF expressao THEN comando_condicional12 comando_condicional2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // chamada_procedimento ::= IDENTIFICADOR PARENTESES_ABRE lista_expressoes error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // chamada_procedimento ::= IDENTIFICADOR error lista_expressoes PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // chamada_procedimento ::= error PARENTESES_ABRE lista_expressoes PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // chamada_procedimento ::= IDENTIFICADOR PARENTESES_ABRE lista_expressoes PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_procedimento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // atribuicao ::= variavel error expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atribuicao ::= variavel OP_ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comando ::= WRITE PARENTESES_ABRE lista_identificadores error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comando ::= WRITE error lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comando ::= READ PARENTESES_ABRE lista_identificadores error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comando ::= READ error lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comando ::= error PARENTESES_ABRE lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comando ::= WRITE PARENTESES_ABRE lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comando ::= READ PARENTESES_ABRE lista_identificadores PARENTESES_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comando ::= comando_repetitivo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comando ::= comando_condicional1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comando ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comando ::= chamada_procedimento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comando ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comando_composto2 ::= error comando comando_composto2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comando_composto2 ::= PONTO_VIRGULA comando comando_composto2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comando_composto ::= BEGIN comando comando_composto2 END BEGIN comando comando_composto2 error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // secao_parametros_formais ::= lista_identificadores error tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // secao_parametros_formais ::= VAR lista_identificadores error tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // secao_parametros_formais ::= error lista_identificadores DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // secao_parametros_formais ::= lista_identificadores DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // secao_parametros_formais ::= VAR lista_identificadores DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // secao_parametros_formais2 ::= error secao_parametros_formais secao_parametros_formais2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // secao_parametros_formais2 ::= PONTO_VIRGULA secao_parametros_formais secao_parametros_formais2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secao_parametros_formais2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_formais ::= secao_parametros_formais secao_parametros_formais2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_formais",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracao_procedimentos1 ::= error parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracao_procedimentos1 ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracao_procedimentos1 ::= PONTO_VIRGULA parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos1",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracao_procedimentos ::= PONTO_VIRGULA bloco declaracao_procedimentos1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracao_procedimentos ::= PARENTESES_ABRE parametros_formais PARENTESES_FECHA PONTO_VIRGULA bloco declaracao_procedimentos1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_procedimentos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parte_declaracao_sub_rotinas ::= comando_composto 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_sub_rotinas",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parte_declaracao_sub_rotinas ::= PROCEDURE IDENTIFICADOR declaracao_procedimentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_sub_rotinas",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_identificadores2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_identificadores2 ::= VIRGULA variavel lista_identificadores2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_identificadores ::= variavel lista_identificadores2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parte_declaracao_variaveis2 ::= error parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parte_declaracao_variaveis2 ::= error tipo lista_identificadores parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parte_declaracao_variaveis2 ::= parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parte_declaracao_variaveis2 ::= PONTO_VIRGULA parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parte_declaracao_variaveis2 ::= PONTO_VIRGULA tipo lista_identificadores parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis2",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parte_declaracao_variaveis ::= error lista_identificadores parte_declaracao_variaveis2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parte_declaracao_variaveis ::= parte_declaracao_sub_rotinas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parte_declaracao_variaveis ::= tipo NT$0 lista_identificadores NT$1 parte_declaracao_variaveis2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parte_declaracao_variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
System.out.println("teste");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("teste");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloco ::= parte_declaracao_variaveis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= PROGRAM IDENTIFICADOR PONTO_VIRGULA bloco error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= PROGRAM IDENTIFICADOR error bloco PONTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= PROGRAM error PONTO_VIRGULA bloco PONTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error IDENTIFICADOR PONTO_VIRGULA bloco PONTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PROGRAM IDENTIFICADOR PONTO_VIRGULA bloco PONTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

